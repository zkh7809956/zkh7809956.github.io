<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵牧一的象牙塔</title>
  <subtitle>华华有颗坚强的心--王者五集团上海地区总代理</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-18T04:55:29.092Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>赵坤鸿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模块化</title>
    <link href="http://yoursite.com/2017/08/18/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://yoursite.com/2017/08/18/模块化/</id>
    <published>2017-08-18T12:22:30.000Z</published>
    <updated>2017-08-18T04:55:29.092Z</updated>
    
    <content type="html"><![CDATA[<p>#模块化</p>
<p>模块就是实现一个特定功能的一组代码，通常一个文件就是一个模块，我们前端模块化中，一个模块指的就是一个js文件。</p>
<p>模块化是把一个复杂的应用分解为很多的可管理的模块。</p>
<h2 id="为什么要有模块化"><a href="#为什么要有模块化" class="headerlink" title="为什么要有模块化"></a>为什么要有模块化</h2><p>模块化最早出现在服务端语言中，因为服务端的逻辑通常都非常的复杂，如果不使用模块进行管理，那么系统会变得难以维护。</p>
<p>现在的网站越来越复杂，功能越来越强大，嵌入网页的Javascript代码越来越庞大，越来越复杂。</p>
<img src="/2017/08/18/模块化/dianxian.jpg" alt="剪不断理还乱" title="剪不断理还乱">
<p>前端模块化编程，已经成为一个迫切的需求。理想情况下，不同的开发者只需要实现不同核心的业务逻辑，其他都可以加载别人已经写好的模块。</p>
<p>因此最简单的模块化做法就是：把一个独立的功能的所有js代码放到一个单独的JS文件中，这就算是一个模块了。使用的时候只需要引入这个js文件即可。</p>
<ul>
<li>容易造成全局变量污染</li>
<li>模块之间的依赖关系必须靠程序员自己维护。</li>
</ul>
<p><strong>模块化的使用场景：在复杂的项目，越适合，如果是非常简单的项目，可以不使用模块化</strong></p>
<h2 id="模块化的标准"><a href="#模块化的标准" class="headerlink" title="模块化的标准"></a>模块化的标准</h2><p>有了模块，我们就可以更方便地使用别人的代码,想要什么功能，就加载什么模块。这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！ 【螺丝与螺帽】</p>
<ul>
<li>CommonJS：是一个模块化的标准，Node.js在使用的模块化标准。适用与后端开发的标准。</li>
<li>AMD（Async Module Definition）：在CommonJS基础上衍生出来的适用于前端开发的模块化标准。<ul>
<li>特点：预加载，第一次访问时，将所有的文件都加载出来。</li>
<li>优点：第一次访问完成以后，再次访问速度会很快</li>
<li>缺点：第一次加载，需要的时间会比较长</li>
<li>代表：requirejs</li>
</ul>
</li>
<li>CMD（Common Module Definition）：在CommonJS基础上衍生出来的适用于前端开发的模块化标准。<ul>
<li>特点：懒加载，只有使用到的时候，才会加载对应的模块。</li>
<li>优点：第一次访问速度会比较快</li>
<li>缺点：再次访问其他模块时会比较慢。</li>
<li>代表：seajs  </li>
</ul>
</li>
</ul>
<h1 id="require-JS"><a href="#require-JS" class="headerlink" title="require.JS"></a>require.JS</h1><h2 id="require-js概念"><a href="#require-js概念" class="headerlink" title="require.js概念"></a>require.js概念</h2><p>requirejs是AMD规范的一个实现，require.js是一个javascript文件，也是一个模块加载器。<strong>模块加载器：相当于canvas中封装的图片加载器，只不过一个是加载图片的，一个加载js，文件的类型不一样。</strong> </p>
<p><a href="http://requirejs.org/" target="_blank" rel="external">官网地址</a></p>
<p><a href="https://github.com/requirejs/requirejs" target="_blank" rel="external">github地址</a></p>
<p>requirejs主要提供两大功能：</p>
<ul>
<li>加载模块：可以加载AMD规范的模块，也可以是普通的模块，异步加载，并且能够管理模块之间的依赖。</li>
<li>规范了模块的定义：有助于不同模块之间的共享与依赖。</li>
</ul>
<p>requirejs的优点：</p>
<ul>
<li>提高了javascript文件的加载速度，避免不必要的堵塞。</li>
<li>独特的模块定义方式可以避免全局变量污染。</li>
<li>独特的模块定义方式可以在脚本层面声明模块之间的依赖。</li>
</ul>
<h2 id="requirejs初体验"><a href="#requirejs初体验" class="headerlink" title="requirejs初体验"></a>requirejs初体验</h2><p><strong>一、引入js文件</strong> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--1. 引入require.js文件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>二、定义模块</strong> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//在a.js文件中</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"a模块加载了"</span>);</div></pre></td></tr></table></figure>
<p><strong>三、引用模块</strong> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//require会自动找当前目录下的js文件，a是文件名，不能写后缀。</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"a"</span>]);</div></pre></td></tr></table></figure>
<h2 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h2><p>requirejs一共对外暴露三个全局变量 </p>
<ol>
<li>requirejs  - 用于加载模块</li>
<li>require     - 用于加载模块</li>
<li>define      - 用于定义模块</li>
</ol>
<p><strong><code>require</code>和<code>requirejs</code>是同一个函数，类似于<code>$</code>和<code>jQuery</code>的关系</strong> </p>
<h3 id="require加载模块"><a href="#require加载模块" class="headerlink" title="require加载模块"></a>require加载模块</h3><ul>
<li>作用：加载模块（amd模块或者是普通模块）</li>
<li>加载普通模块，模块加载完是会执行一遍的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//第一个参数：数组，需要加载的模块，异步加载的</span></div><div class="line"><span class="comment">//第二个参数：回调函数，在模块都加载完毕之后，回调函数才会执行</span></div><div class="line"><span class="comment">//require(["js/a", "js/b", "js/c"]);</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"js/a"</span>, <span class="string">"js/b"</span>, <span class="string">"js/c"</span>],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"我是最后执行的"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="define定义模块"><a href="#define定义模块" class="headerlink" title="define定义模块"></a>define定义模块</h3><p>使用define函数可以定义一个AMD规范的模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//第一个参数：模块的依赖</span></div><div class="line"><span class="comment">//第二个参数：模块的主体</span></div><div class="line">define([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"a模块加载了"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>好处：require独特的定义方式，避免了全局变量的污染。</p>
<h3 id="模块之间的依赖"><a href="#模块之间的依赖" class="headerlink" title="模块之间的依赖"></a>模块之间的依赖</h3><p>在使用define定义一个模块时，如果模块依赖于另一个模块，我们可以通过define的第一个参数去指定。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//第一个参数：本模块依赖的模块列表  路径是以html的路径为基准</span></div><div class="line"><span class="comment">//第二个参数：模块的主体</span></div><div class="line">define([<span class="string">"js/a"</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"a模块依赖与b模块"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>优点：可以在声明模块的时候就可以定义好依赖，那么使用的时候，就不用在管模块之间的依赖了。使用起来会更加的方便。</p>
<h3 id="模块的输出（对外暴露的东西）"><a href="#模块的输出（对外暴露的东西）" class="headerlink" title="模块的输出（对外暴露的东西）"></a>模块的输出（对外暴露的东西）</h3><p>如果模块仅仅是执行一些代码实现某个功能，那么直接引入该模块，实现对应的功能即可，不需要返回值。如果该模块的存在是为了提供一些方法、对象或者其他一些内容，那么这个模块需要返回值。</p>
<p>在定义模块的时候，我们通常需要对外返回一些内容，因为使用define定义模块，实质就是一个函数，因此可以使用<code>return</code>返回模块的输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">define([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> util = &#123;</div><div class="line">    sayHello:<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"大家好，我是"</span>+name);</div><div class="line">    &#125;,</div><div class="line">    sleep:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"好困啊，我想要睡觉"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//通过return返回模块的输出</span></div><div class="line">  <span class="keyword">return</span> util;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>想要获取模块的输出，在function中传递形参即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//参数1：加载的模块列表</span></div><div class="line"><span class="comment">//参数2：模块加载完成后，会执行的回调函数,形参就是模块的返回值</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"b"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">util</span>) </span>&#123;</div><div class="line">  util.sayHello(<span class="string">"张三"</span>);</div><div class="line">  util.sleep();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果依赖于多个模块，应该怎么办？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//1. 如果依赖于多个模块，并且多个模块都有输出，那么我们需要使用参数一一对应，</span></div><div class="line"><span class="comment">//2. 这样就可以获取到多个模块的输出了。</span></div><div class="line"><span class="comment">//3. 即便某个模块没有输出，我们也要指定一个参数占着位置。</span></div><div class="line"><span class="comment">//4. 通常我们会把有输出的模块写在前面，没有输出的模块写在后面。这样方便写参数。</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"js/util"</span>, <span class="string">"js/common"</span>, <span class="string">"js/test"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">util, demo</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(util);</div><div class="line">  <span class="built_in">console</span>.log(demo);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="配置路径和别名"><a href="#配置路径和别名" class="headerlink" title="配置路径和别名"></a>配置路径和别名</h3><ul>
<li>使用require来加载某个模块时，路径会以当前html文件作为参考。</li>
<li>require可以使用config来配置一些内容，比如基础路径</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  <span class="comment">//1. 配置所有模块的基础路径，该路径相对于引入了requirejs的html文件的路径。</span></div><div class="line">  <span class="comment">//2. 所有的路径都会自动的拼上baseUrl</span></div><div class="line">  baseUrl:<span class="string">"js/"</span>,</div><div class="line">  <span class="comment">//1. 给模块起别名，方便使用，在依赖的模块中也能使用</span></div><div class="line">  paths:&#123;</div><div class="line">    <span class="string">"common"</span>:<span class="string">"common/common"</span>,</div><div class="line">    <span class="string">"util"</span>:<span class="string">"util/util"</span>,</div><div class="line">    <span class="string">"test"</span>:<span class="string">"login/test"</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//引入模块时，只需要直接引入模块的别名即可。</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"common"</span>, <span class="string">"util"</span>, <span class="string">"test"</span>],<span class="function"><span class="keyword">function</span> (<span class="params">demo, util</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(demo);</div><div class="line">  <span class="built_in">console</span>.log(util);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="加载非AMD规范的模块"><a href="#加载非AMD规范的模块" class="headerlink" title="加载非AMD规范的模块"></a>加载非AMD规范的模块</h3><p>requirejs可以通过require函数加载模块。在加载不是AMD规范的模式时，会出现问题，需要做特殊的处理。</p>
<p>市面上有很多模块，并没有实现AMD模块化规范，没有实现模块化的模块也可以使用requirejs去加载，但是require加载时，仅仅会执行这个js文件，并不能帮助这个模块实现依赖的加载，也无法获取到这个模块的输出。</p>
<p>我们可以通过require.config为没实现AMD规范加载依赖项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  baseUrl:<span class="string">"js/"</span>,</div><div class="line">  path:&#123;</div><div class="line">    <span class="string">"base"</span>:<span class="string">"base"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//垫：配置普通模块的依赖与输出</span></div><div class="line">  shim:&#123;</div><div class="line">    <span class="string">"base"</span>:&#123;</div><div class="line">      <span class="comment">//配置普通模块的依赖项</span></div><div class="line">      deps:[<span class="string">"依赖项1"</span>,<span class="string">"依赖项2"</span>],</div><div class="line">      <span class="comment">//配置模块的输出</span></div><div class="line">      exports: <span class="string">"输出结果"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="使用模块化加载jquery"><a href="#使用模块化加载jquery" class="headerlink" title="使用模块化加载jquery"></a>使用模块化加载jquery</h3><p>想使用模块化加载第三方库的时候，首先需要检查第第三方库是否支持模块化。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="images/jquery.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图，说明这个第三方库是支持模块化的，可以直接使用require进行加载。</p>
<p>具名模块与匿名模块</p>
<p>define声明时，第一个参数可以是该模块的名字，如果声明了模块名，在配置时，模块别名就不能够调整了。</p>
<p><a href="http://www.2cto.com/kf/201410/344627.html" target="_blank" rel="external">requireJS的匿名模块和命名模块的差别和最佳实践</a></p>
<p>【练习：使用jquery与jquery.color插件实现颜色的渐变效果】</p>
<h1 id="博学谷环境搭建"><a href="#博学谷环境搭建" class="headerlink" title="博学谷环境搭建"></a>博学谷环境搭建</h1><h2 id="设置虚拟主机"><a href="#设置虚拟主机" class="headerlink" title="设置虚拟主机"></a>设置虚拟主机</h2><ul>
<li>在C盘的www目录，新建了一个<code>boxuegu</code>文件夹</li>
</ul>
<ul>
<li><code>D:\phpStudy\Apache\conf\extra</code>目录下找到<code>httpd-vhosts.conf</code>,打开编辑</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</div><div class="line">    ServerAdmin webmaster@dummy-host.example.com</div><div class="line">    #根目录</div><div class="line">    DocumentRoot <span class="string">"C:\www\boxuegu"</span></div><div class="line">    #域名</div><div class="line">    ServerName boxuegu.com</div><div class="line">    #完整域名</div><div class="line">    ServerAlias www.boxuegu.com</div><div class="line">    ErrorLog <span class="string">"logs/dummy-host.example.com-error.log"</span></div><div class="line">    CustomLog <span class="string">"logs/dummy-host.example.com-access.log"</span> common</div><div class="line">&lt;<span class="regexp">/VirtualHost&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>修改host文件，<code>C:\Windows\System32\drivers\etc</code>找到<code>hosts</code>文件,添加以下内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> boxuegu.com</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> www.boxuegu.com</div></pre></td></tr></table></figure>
<p><strong>注意：如果提示没有权限保存，先把hosts文件复制到桌面上，进行修改，修改完成之后，再拖回去，覆盖即可。</strong> </p>
<ul>
<li>重启服务器，进行测试</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#模块化&lt;/p&gt;
&lt;p&gt;模块就是实现一个特定功能的一组代码，通常一个文件就是一个模块，我们前端模块化中，一个模块指的就是一个js文件。&lt;/p&gt;
&lt;p&gt;模块化是把一个复杂的应用分解为很多的可管理的模块。&lt;/p&gt;
&lt;h2 id=&quot;为什么要有模块化&quot;&gt;&lt;a href=&quot;#为什么要
    
    </summary>
    
      <category term="AMD" scheme="http://yoursite.com/categories/AMD/"/>
    
    
      <category term="amd" scheme="http://yoursite.com/tags/amd/"/>
    
      <category term="requireJs" scheme="http://yoursite.com/tags/requireJs/"/>
    
  </entry>
  
  <entry>
    <title>我的第五篇博客</title>
    <link href="http://yoursite.com/2017/08/17/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/08/17/我的博客/</id>
    <published>2017-08-17T12:22:30.000Z</published>
    <updated>2017-08-17T06:25:36.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>
<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p>
<img src="/2017/08/17/我的博客/3.jpg" alt="最爱的提莫" title="最爱的提莫">
<h2 id="为什么要有分支？"><a href="#为什么要有分支？" class="headerlink" title="为什么要有分支？"></a><strong>为什么要有分支？</strong></h2><ul>
<li>如果你要开发一个新的功能，需要2周时间，第一周你只能写50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。</li>
<li>有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。</li>
<li>在工作过程中，经常会碰到<strong>多任务并行开发</strong> 的情况，使用分支就能很好的避免任务之间的影响。</li>
<li>其他版本工具比如svn，cvs中也有分支这个概念，但是这些工具中的分支操作非常的慢，形同摆设。</li>
</ul>
<h2 id="分支操作的命令"><a href="#分支操作的命令" class="headerlink" title="分支操作的命令"></a>分支操作的命令</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与主分支的内容完全相同。</li>
<li>git在第一次提交时，就有了一个叫<code>master</code>的主分支。</li>
</ul>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul>
<li><code>git branch</code>可以查看所有的分支，</li>
<li>在当前分支的前面会有一个</li>
</ul>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul>
<li><code>git checkout 分支名称</code>切换分支</li>
<li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li>
<li>切换分支之前，<strong>必须保证代码已经提交了</strong> </li>
</ul>
<h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul>
<li><code>git branch -d 分支名称</code> 可以删除分支</li>
<li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li>
<li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul>
<li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li>
<li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li>
</ul>
<h2 id="git分支的工作原理"><a href="#git分支的工作原理" class="headerlink" title="git分支的工作原理"></a>git分支的工作原理</h2><h2 id="git合并冲突"><a href="#git合并冲突" class="headerlink" title="git合并冲突"></a>git合并冲突</h2><ul>
<li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li>
<li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>所有的程序员都可以通过远程仓库来进行版本的共享，达到所有人的代码一致的效果。</p>
<h2 id="创建远程仓库（了解）"><a href="#创建远程仓库（了解）" class="headerlink" title="创建远程仓库（了解）"></a>创建远程仓库（了解）</h2><ul>
<li>创建远程仓库</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">git init --bare   # 创建一个裸仓库</div></pre></td></tr></table></figure>
<ul>
<li>远程仓库是一个裸仓库，只支持push、clone、pull等操作</li>
<li>裸仓库的目的是用来管理版本的共享。</li>
<li>裸仓库不支持add commit等操作。不进行任何的开发工作。</li>
<li>一般裸仓库的名称会以.git结尾</li>
</ul>
<h2 id="远程仓库相关的命令"><a href="#远程仓库相关的命令" class="headerlink" title="远程仓库相关的命令"></a>远程仓库相关的命令</h2><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><ul>
<li>作用：将本地代码提交到远程仓库</li>
<li><code>git push 仓库地址 master</code> 在代码提交到远程仓库，注意master分支必须写，不能省略</li>
<li>例子：<code>git push git@github.com:hucongcong/test.git master</code> 如果第一次使用，需要填写github的用户名和密码</li>
</ul>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><ul>
<li>作用：将远程的代码下载到本地</li>
<li><code>git pull 代码地址 master</code> 将远程的代码中master分支下载到本地</li>
<li>通常在push前，需要先pull一次。</li>
</ul>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><ul>
<li>作用：克隆远程仓库的代码到本地</li>
<li><code>git clone 仓库地址 自定义本地仓库名</code> 将整个仓库克隆到本地</li>
</ul>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>每次push和pull操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p>
<ul>
<li><code>git remote add 仓库别名 仓库地址</code> 使用仓库别名替代仓库地址。仓库别名相当于一个js变量，仓库地址就是对应的值。<ul>
<li><code>git remote add hucc git@github.com:hucongcong/test.git</code> 设置了一个hucc的仓库别名，以后push和pull都可以不用仓库地址，而用hucc</li>
</ul>
</li>
<li><code>git remote remove hucc</code> 删除hucc这个仓库别名。</li>
<li><code>git remote</code> 查看所有的仓库别名</li>
<li>如果使用了<code>git clone</code>命令从远程仓库获取下来的，那么这个本地仓库会自动添加一个 origin的远程地址，指向的就是克隆的远程地址。</li>
</ul>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>git与github没有直接的关系。</p>
<ul>
<li>git是一个版本控制工具。</li>
<li>github是一个代码托管平台，是git的一个远程代码仓库。</li>
<li>将来工作时，公司会有自己的代码仓库。</li>
</ul>
<p><a href="https://github.com/" target="_blank" rel="external">github官网</a></p>
<p><a href="https://git.oschina.net/" target="_blank" rel="external">开源中国-git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</div><div class="line">2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</div></pre></td></tr></table></figure>
<p>在github上创建一个项目，获取到仓库的地址。然后就可以将本地的代码推送到远程的服务器上。</p>
<h2 id="SSH免登陆"><a href="#SSH免登陆" class="headerlink" title="SSH免登陆"></a>SSH免登陆</h2><p>每次push代码，都需要输入用户名跟密码，非常的麻烦。因此我们可以配置一个SSH免登陆。</p>
<ul>
<li>github为了账户的安全，需要对每一次push请求都要验证用户的身份，只有合法的用户才可以push</li>
<li>使用ssh可以实现免密码操作（不需要使用密码）</li>
</ul>
<h3 id="对称加密与非对称加密（了解）"><a href="#对称加密与非对称加密（了解）" class="headerlink" title="对称加密与非对称加密（了解）"></a>对称加密与非对称加密（了解）</h3><p>对称加密：采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p>
<p>优点：算法公开、计算量小、加密速度快、加密效率高</p>
<p>非对称加密：非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）</p>
<p>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>
<p>优点：更安全，缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</p>
<h3 id="ssh免登录的原理"><a href="#ssh免登录的原理" class="headerlink" title="ssh免登录的原理"></a>ssh免登录的原理</h3><h3 id="SSH免登录配置"><a href="#SSH免登录配置" class="headerlink" title="SSH免登录配置"></a>SSH免登录配置</h3><ul>
<li>1 创建SSH Key：<code>ssh-keygen -t rsa</code></li>
<li>2 在文件路径 <code>C:\用户\当前用户名\</code> 找到 <code>.ssh</code> 文件夹</li>
<li>3 文件夹中有两个文件：<ul>
<li>私钥：<code>id_rsa</code></li>
<li>公钥：<code>id_rsa.pub</code></li>
</ul>
</li>
<li>4 在 <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建SSH key</li>
<li>5 粘贴 公钥 <code>id_rsa.pub</code> 内容到对应文本框中</li>
<li>5 在github中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li>
<li>6 此后，再次SSH方式与github“通信”，不用输入密码确认身份了</li>
</ul>
<h2 id="使用github-pages搭建博客"><a href="#使用github-pages搭建博客" class="headerlink" title="使用github pages搭建博客"></a>使用github pages搭建博客</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages </a>本用于介绍托管在 GitHub 的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p>
<p>缺点：只能放静态页面，也就说github pages只能解析html、css、js，无法解析后端语言。</p>
<p>博客搭建步骤：</p>
<ol>
<li>在本地工作目录使用git初始化 <code>git init</code></li>
<li>创建自己的博客项目</li>
<li>将创建好的博客添加到暂存区 <code>git add [文件路径]</code></li>
<li>本地提交： <code>git commit -m &quot;第一个博客&quot;</code></li>
<li>在github上创建一个项目，项目名<code>用户名.github.io</code> 固定的</li>
<li>提交到github：<code>git push github仓库地址 master</code></li>
<li>查看github中对应的仓库中，是不是提交到了</li>
<li>访问：用户名.github.io</li>
</ol>
<h2 id="hexo创建博客（了解）"><a href="#hexo创建博客（了解）" class="headerlink" title="hexo创建博客（了解）"></a>hexo创建博客（了解）</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li>安装hexo</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">npm install -g hexo</div><div class="line"></div><div class="line">hexo -v  # 查看hexo的版本信息</div></pre></td></tr></table></figure>
<ul>
<li>初始化博客</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line"># 新建一个目录  blog</div><div class="line">hexo init  # 初始化</div></pre></td></tr></table></figure>
<ul>
<li>生成静态页面</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">hexo generate   # 生成静态页面	</div><div class="line">hexo g          # 生成静态页面（简写）</div></pre></td></tr></table></figure>
<ul>
<li>启动服务</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">hexo server   # 启动服务</div></pre></td></tr></table></figure>
<ul>
<li>访问站点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">http:<span class="comment">//localhost:4000/  # 通过这个地址就可以访问了</span></div></pre></td></tr></table></figure>
<h3 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h3><ul>
<li><code>hexo n &#39;博客标题&#39;</code>创建一篇新的博客</li>
<li><code>hexo g</code> 生成博客</li>
<li><code>hexo d</code> 发布博客</li>
</ul>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git分支操作&quot;&gt;&lt;a href=&quot;#git分支操作&quot; class=&quot;headerlink&quot; title=&quot;git分支操作&quot;&gt;&lt;/a&gt;git分支操作&lt;/h1&gt;&lt;p&gt;分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="git命令" scheme="http://yoursite.com/tags/git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>我的第五篇博客</title>
    <link href="http://yoursite.com/2017/08/17/%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/08/17/笔记/</id>
    <published>2017-08-17T12:22:30.000Z</published>
    <updated>2017-08-17T05:11:42.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>
<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p>

<h2 id="为什么要有分支？"><a href="#为什么要有分支？" class="headerlink" title="为什么要有分支？"></a><strong>为什么要有分支？</strong></h2><ul>
<li>如果你要开发一个新的功能，需要2周时间，第一周你只能写50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。</li>
<li>有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。</li>
<li>在工作过程中，经常会碰到<strong>多任务并行开发</strong> 的情况，使用分支就能很好的避免任务之间的影响。</li>
<li>其他版本工具比如svn，cvs中也有分支这个概念，但是这些工具中的分支操作非常的慢，形同摆设。</li>
</ul>
<h2 id="分支操作的命令"><a href="#分支操作的命令" class="headerlink" title="分支操作的命令"></a>分支操作的命令</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与主分支的内容完全相同。</li>
<li>git在第一次提交时，就有了一个叫<code>master</code>的主分支。</li>
</ul>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul>
<li><code>git branch</code>可以查看所有的分支，</li>
<li>在当前分支的前面会有一个</li>
</ul>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul>
<li><code>git checkout 分支名称</code>切换分支</li>
<li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li>
<li>切换分支之前，<strong>必须保证代码已经提交了</strong> </li>
</ul>
<h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul>
<li><code>git branch -d 分支名称</code> 可以删除分支</li>
<li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li>
<li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul>
<li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li>
<li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li>
</ul>
<h2 id="git分支的工作原理"><a href="#git分支的工作原理" class="headerlink" title="git分支的工作原理"></a>git分支的工作原理</h2><h2 id="git合并冲突"><a href="#git合并冲突" class="headerlink" title="git合并冲突"></a>git合并冲突</h2><ul>
<li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li>
<li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>所有的程序员都可以通过远程仓库来进行版本的共享，达到所有人的代码一致的效果。</p>
<h2 id="创建远程仓库（了解）"><a href="#创建远程仓库（了解）" class="headerlink" title="创建远程仓库（了解）"></a>创建远程仓库（了解）</h2><ul>
<li>创建远程仓库</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">git init --bare   # 创建一个裸仓库</div></pre></td></tr></table></figure>
<ul>
<li>远程仓库是一个裸仓库，只支持push、clone、pull等操作</li>
<li>裸仓库的目的是用来管理版本的共享。</li>
<li>裸仓库不支持add commit等操作。不进行任何的开发工作。</li>
<li>一般裸仓库的名称会以.git结尾</li>
</ul>
<h2 id="远程仓库相关的命令"><a href="#远程仓库相关的命令" class="headerlink" title="远程仓库相关的命令"></a>远程仓库相关的命令</h2><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><ul>
<li>作用：将本地代码提交到远程仓库</li>
<li><code>git push 仓库地址 master</code> 在代码提交到远程仓库，注意master分支必须写，不能省略</li>
<li>例子：<code>git push git@github.com:hucongcong/test.git master</code> 如果第一次使用，需要填写github的用户名和密码</li>
</ul>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><ul>
<li>作用：将远程的代码下载到本地</li>
<li><code>git pull 代码地址 master</code> 将远程的代码中master分支下载到本地</li>
<li>通常在push前，需要先pull一次。</li>
</ul>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><ul>
<li>作用：克隆远程仓库的代码到本地</li>
<li><code>git clone 仓库地址 自定义本地仓库名</code> 将整个仓库克隆到本地</li>
</ul>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>每次push和pull操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p>
<ul>
<li><code>git remote add 仓库别名 仓库地址</code> 使用仓库别名替代仓库地址。仓库别名相当于一个js变量，仓库地址就是对应的值。<ul>
<li><code>git remote add hucc git@github.com:hucongcong/test.git</code> 设置了一个hucc的仓库别名，以后push和pull都可以不用仓库地址，而用hucc</li>
</ul>
</li>
<li><code>git remote remove hucc</code> 删除hucc这个仓库别名。</li>
<li><code>git remote</code> 查看所有的仓库别名</li>
<li>如果使用了<code>git clone</code>命令从远程仓库获取下来的，那么这个本地仓库会自动添加一个 origin的远程地址，指向的就是克隆的远程地址。</li>
</ul>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>git与github没有直接的关系。</p>
<ul>
<li>git是一个版本控制工具。</li>
<li>github是一个代码托管平台，是git的一个远程代码仓库。</li>
<li>将来工作时，公司会有自己的代码仓库。</li>
</ul>
<p><a href="https://github.com/" target="_blank" rel="external">github官网</a></p>
<p><a href="https://git.oschina.net/" target="_blank" rel="external">开源中国-git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</div><div class="line">2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</div></pre></td></tr></table></figure>
<p>在github上创建一个项目，获取到仓库的地址。然后就可以将本地的代码推送到远程的服务器上。</p>
<h2 id="SSH免登陆"><a href="#SSH免登陆" class="headerlink" title="SSH免登陆"></a>SSH免登陆</h2><p>每次push代码，都需要输入用户名跟密码，非常的麻烦。因此我们可以配置一个SSH免登陆。</p>
<ul>
<li>github为了账户的安全，需要对每一次push请求都要验证用户的身份，只有合法的用户才可以push</li>
<li>使用ssh可以实现免密码操作（不需要使用密码）</li>
</ul>
<h3 id="对称加密与非对称加密（了解）"><a href="#对称加密与非对称加密（了解）" class="headerlink" title="对称加密与非对称加密（了解）"></a>对称加密与非对称加密（了解）</h3><p>对称加密：采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p>
<p>优点：算法公开、计算量小、加密速度快、加密效率高</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="images/对称加密.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>非对称加密：非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）</p>
<p>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>
<p>优点：更安全，缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="images/非对称加密.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="ssh免登录的原理"><a href="#ssh免登录的原理" class="headerlink" title="ssh免登录的原理"></a>ssh免登录的原理</h3><p><img src="images/ssh免登陆.png" alt=""></p>
<h3 id="SSH免登录配置"><a href="#SSH免登录配置" class="headerlink" title="SSH免登录配置"></a>SSH免登录配置</h3><ul>
<li>1 创建SSH Key：<code>ssh-keygen -t rsa</code></li>
<li>2 在文件路径 <code>C:\用户\当前用户名\</code> 找到 <code>.ssh</code> 文件夹</li>
<li>3 文件夹中有两个文件：<ul>
<li>私钥：<code>id_rsa</code></li>
<li>公钥：<code>id_rsa.pub</code></li>
</ul>
</li>
<li>4 在 <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建SSH key</li>
<li>5 粘贴 公钥 <code>id_rsa.pub</code> 内容到对应文本框中</li>
<li>5 在github中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li>
<li>6 此后，再次SSH方式与github“通信”，不用输入密码确认身份了</li>
</ul>
<h2 id="使用github-pages搭建博客"><a href="#使用github-pages搭建博客" class="headerlink" title="使用github pages搭建博客"></a>使用github pages搭建博客</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages </a>本用于介绍托管在 GitHub 的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p>
<p>缺点：只能放静态页面，也就说github pages只能解析html、css、js，无法解析后端语言。</p>
<p>博客搭建步骤：</p>
<ol>
<li>在本地工作目录使用git初始化 <code>git init</code></li>
<li>创建自己的博客项目</li>
<li>将创建好的博客添加到暂存区 <code>git add [文件路径]</code></li>
<li>本地提交： <code>git commit -m &quot;第一个博客&quot;</code></li>
<li>在github上创建一个项目，项目名<code>用户名.github.io</code> 固定的</li>
<li>提交到github：<code>git push github仓库地址 master</code></li>
<li>查看github中对应的仓库中，是不是提交到了</li>
<li>访问：用户名.github.io</li>
</ol>
<h2 id="hexo创建博客（了解）"><a href="#hexo创建博客（了解）" class="headerlink" title="hexo创建博客（了解）"></a>hexo创建博客（了解）</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li>安装hexo</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">npm install -g hexo</div><div class="line"></div><div class="line">hexo -v  # 查看hexo的版本信息</div></pre></td></tr></table></figure>
<ul>
<li>初始化博客</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line"># 新建一个目录  blog</div><div class="line">hexo init  # 初始化</div></pre></td></tr></table></figure>
<ul>
<li>生成静态页面</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">hexo generate   # 生成静态页面	</div><div class="line">hexo g          # 生成静态页面（简写）</div></pre></td></tr></table></figure>
<ul>
<li>启动服务</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">hexo server   # 启动服务</div></pre></td></tr></table></figure>
<ul>
<li>访问站点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">http:<span class="comment">//localhost:4000/  # 通过这个地址就可以访问了</span></div></pre></td></tr></table></figure>
<h3 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h3><ul>
<li><code>hexo n &#39;博客标题&#39;</code>创建一篇新的博客</li>
<li><code>hexo g</code> 生成博客</li>
<li><code>hexo d</code> 发布博客</li>
</ul>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git分支操作&quot;&gt;&lt;a href=&quot;#git分支操作&quot; class=&quot;headerlink&quot; title=&quot;git分支操作&quot;&gt;&lt;/a&gt;git分支操作&lt;/h1&gt;&lt;p&gt;分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="git命令" scheme="http://yoursite.com/tags/git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/16/hello-world/"/>
    <id>http://yoursite.com/2017/08/16/hello-world/</id>
    <published>2017-08-16T14:00:37.078Z</published>
    <updated>2017-08-16T12:18:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2017/08/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/08/16/我的第一篇博客/</id>
    <published>2017-08-16T12:22:30.000Z</published>
    <updated>2017-08-16T13:10:35.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我是最大的标题"><a href="#我是最大的标题" class="headerlink" title="我是最大的标题"></a>我是最大的标题</h1><h2 id="我是二级标题"><a href="#我是二级标题" class="headerlink" title="我是二级标题"></a>我是二级标题</h2><h3 id="我是三级标题"><a href="#我是三级标题" class="headerlink" title="我是三级标题"></a>我是三级标题</h3><ul>
<li>我是无序列表<ul>
<li>我是无序列表</li>
<li>呵呵</li>
<li>嘻嘻</li>
</ul>
</li>
</ul>
<p><em>我是斜体代ma</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈哈"</span>);</div><div class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(num);</div><div class="line"><span class="comment">//这是注释</span></div><div class="line"></div><div class="line"></div><div class="line">|标题|描述|</div></pre></td></tr></table></figure>
<p><strong>这是加粗的文字</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我是最大的标题&quot;&gt;&lt;a href=&quot;#我是最大的标题&quot; class=&quot;headerlink&quot; title=&quot;我是最大的标题&quot;&gt;&lt;/a&gt;我是最大的标题&lt;/h1&gt;&lt;h2 id=&quot;我是二级标题&quot;&gt;&lt;a href=&quot;#我是二级标题&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2016/08/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2%20/"/>
    <id>http://yoursite.com/2016/08/16/我的第二篇博客 /</id>
    <published>2016-08-16T12:22:30.000Z</published>
    <updated>2017-08-16T13:34:55.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我是最大的标题"><a href="#我是最大的标题" class="headerlink" title="我是最大的标题"></a>我是最大的标题</h1><h2 id="我是二级标题"><a href="#我是二级标题" class="headerlink" title="我是二级标题"></a>我是二级标题</h2><h3 id="我是三级标题"><a href="#我是三级标题" class="headerlink" title="我是三级标题"></a>我是三级标题</h3><ul>
<li>我是无序列表<ul>
<li>我是无序列表</li>
<li>呵呵</li>
<li>嘻嘻</li>
</ul>
</li>
</ul>
<p><em>我是斜体代ma</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈哈"</span>);</div><div class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(num);</div><div class="line"><span class="comment">//这是注释</span></div><div class="line"></div><div class="line"></div><div class="line">|标题|描述|</div></pre></td></tr></table></figure>
<p><strong>这是加粗的文字</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我是最大的标题&quot;&gt;&lt;a href=&quot;#我是最大的标题&quot; class=&quot;headerlink&quot; title=&quot;我是最大的标题&quot;&gt;&lt;/a&gt;我是最大的标题&lt;/h1&gt;&lt;h2 id=&quot;我是二级标题&quot;&gt;&lt;a href=&quot;#我是二级标题&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>我的第四篇博客</title>
    <link href="http://yoursite.com/2016/08/16/%E6%88%91%E7%9A%84%E7%AC%AC%E5%9B%9B%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/08/16/我的第四篇博客/</id>
    <published>2016-08-16T12:22:30.000Z</published>
    <updated>2017-08-16T14:49:24.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我是个好好孩子"><a href="#我是个好好孩子" class="headerlink" title="我是个好好孩子"></a>我是个好好孩子</h1><h2 id="这是个真实的橘子"><a href="#这是个真实的橘子" class="headerlink" title="这是个真实的橘子"></a>这是个真实的橘子</h2><h3 id="请不要怀疑"><a href="#请不要怀疑" class="headerlink" title="请不要怀疑"></a>请不要怀疑</h3><ul>
<li>我是无序列表<ul>
<li>我是无序列表</li>
<li>呵呵</li>
<li>嘻嘻</li>
</ul>
</li>
</ul>
<p><em>我是斜体代ma</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈哈"</span>);</div><div class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(num);</div><div class="line"><span class="comment">//这是注释</span></div></pre></td></tr></table></figure>
<p><strong>这是加粗的文字</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我是个好好孩子&quot;&gt;&lt;a href=&quot;#我是个好好孩子&quot; class=&quot;headerlink&quot; title=&quot;我是个好好孩子&quot;&gt;&lt;/a&gt;我是个好好孩子&lt;/h1&gt;&lt;h2 id=&quot;这是个真实的橘子&quot;&gt;&lt;a href=&quot;#这是个真实的橘子&quot; class=&quot;headerli
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
