<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵牧一的象牙塔</title>
  <subtitle>华华有颗坚强的心--王者五集团上海地区总代理</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="zkh7809956.github.io/"/>
  <updated>2017-08-30T08:26:45.625Z</updated>
  <id>zkh7809956.github.io/</id>
  
  <author>
    <name>赵坤鸿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Canvas的基本使用</title>
    <link href="zkh7809956.github.io/2017/08/30/Canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>zkh7809956.github.io/2017/08/30/Canvas的基本使用/</id>
    <published>2017-08-30T08:02:59.000Z</published>
    <updated>2017-08-30T08:26:45.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Canvas-第一篇"><a href="#Canvas-第一篇" class="headerlink" title="Canvas  第一篇"></a>Canvas  第一篇</h1><h2 id="Canvas的基本概念"><a href="#Canvas的基本概念" class="headerlink" title="Canvas的基本概念"></a>Canvas的基本概念</h2><ol>
<li>Canvas 是个H5中新增的标签</li>
<li>Canvas 默认宽高 300 * 150</li>
<li>设置canvas标签的尺寸应该使用行内属性的方式，而不是css样式，因为css样式会将画布拉伸</li>
<li>canvas标签是有兼容性问题的，所以在不支持canvas的浏览器中，会被当做div处理，所以一般会在canvas中书写一些提示信息，这些信息只有在不支持canvas的浏览器中才会显示出来</li>
<li>canvas的api兼容性非常好，所有支持canvas的浏览器中，api的使用方式都是一致的</li>
<li>canvas是一个画布，他自己不能绘制图形，需要使用绘图工具，页面中每一个canvas标签都有自己的绘图工具</li>
</ol>
<h2 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h2><ol>
<li>要在页面中书写canvas标签</li>
<li>使用js代码获取canvas标签对象</li>
<li>使用获取到的canvas标签对象获取绘图工具（canvas对象.getContext(“2d”)）</li>
<li>确定起始点（绘图工具.moveTo()）</li>
<li>确定结束点（绘图工具.lineTo()）</li>
<li>描线 （绘图工具.stroke())</li>
</ol>
<h2 id="canvas基本api"><a href="#canvas基本api" class="headerlink" title="canvas基本api"></a>canvas基本api</h2><ol>
<li>canvas对象.getContext(type)<br>这个方法可以用来获取绘图工具，type用来指定绘图工具的类型<br>type有两种值： “2d”  “webgl”</li>
<li>绘图工具.moveTo(x, y)<br>这个方法用来确定起始位置 x,y 表示坐标</li>
<li>绘图工具.lineTo(x, y)<br>这个方法用来确定结束位置 x,y 表示坐标<br>本次lineTo点，将会成为下次lineTo的起点</li>
<li>绘图工具.stroke()<br>这个方法用来将当前路径下所有绘制的内容，进行描边</li>
<li>绘图工具.fill()<br>这个方法用来将当前路径下所有绘制的内容，进行填充 （只填充封闭的图形，遵守非零环绕原则）</li>
<li>绘图工具.closePath()<br>这个方法用来闭合图形，其实就是将最后一次lineTo的点，和最后一次moveTo的点连接起来</li>
<li>绘图工具.beginPath()<br>这个方法用来开启新的路径，每当要换一种新的绘图方式，或者绘图状态（颜色，样式。。。）的时候，就需要开启一个新的路径</li>
</ol>
<h2 id="非零环绕原则"><a href="#非零环绕原则" class="headerlink" title="非零环绕原则"></a>非零环绕原则</h2><p>当绘图进行填充的时候，判断指定的封闭区域要不要被填充，只需要从该区域从任意方向画出一条直线，判断经过该直线的方法相反的线段的数量是否相等，如果相等，那么这个区域不被填充，反之要被填充</p>
<h3 id="使用该原则绘制镂空的图形"><a href="#使用该原则绘制镂空的图形" class="headerlink" title="使用该原则绘制镂空的图形"></a>使用该原则绘制镂空的图形</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 获取canvas标签</span></div><div class="line">   <span class="keyword">var</span> cas = <span class="built_in">document</span>.querySelector(<span class="string">"#c"</span>);</div><div class="line">   <span class="comment">//2. 使用canvas标签获取绘图工具</span></div><div class="line">   <span class="keyword">var</span> ctx = cas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">   ctx.lineWidth = <span class="number">20</span>;</div><div class="line"></div><div class="line">   ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">   ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>);</div><div class="line">   ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">   ctx.lineTo(<span class="number">100</span>, <span class="number">200</span>);</div><div class="line">   ctx.closePath();</div><div class="line">   ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>形象： 两张纸<br>每次绘制的内容，都是在一个路径下，当执行stroke或者fill方法的时候，会将当前路径下所有的内容，按照当前路径设置的状态（、。。）绘制到屏幕上!</p>
<h2 id="线型相关的属性"><a href="#线型相关的属性" class="headerlink" title="线型相关的属性"></a>线型相关的属性</h2><ol>
<li>绘图工具.lineWidth       设置线宽  </li>
<li>绘图工具.strokeStyle     设置描边的颜色  css颜色格式都接收</li>
<li>绘图工具.fillStyle       设置填充的颜色  同上</li>
<li>绘图工具.lineCap         设置线两端的样式  square round butt</li>
<li>绘图工具.lineJoin        设置两条线相交的拐点的样式 round bevel miter</li>
<li>绘图工具.setLineDash     设置虚线的宽度，这是一个方法，传递的参数是一个数组，数组中每一个元素都表示宽度，数组中的所有元素会被循环着依次应用虚线中的每一段上， 如果要设置为实现，就传一个空数组</li>
<li>绘图工具.getLineDash     获取虚线设置的数组  如果是实线 获取到的就是一个空数组</li>
<li>绘图工具.lineDashOffset  设置虚线的偏移量 正值向左 负值向右</li>
</ol>
<h2 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h2><p>将直线分成由一个个像素点组成线。<br>将每一个像素点设置为不同的颜色，即可</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;canvas width=<span class="string">"800"</span> height=<span class="string">"600"</span> id=<span class="string">"cas"</span>&gt;</div><div class="line">&lt;<span class="regexp">/canvas&gt;</span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">	var cas = document.querySelector("#cas");</span></div><div class="line"><span class="regexp">    /</span><span class="regexp">/获取绘图工具</span></div><div class="line"><span class="regexp">    var cx = cas.getContext("2d");</span></div><div class="line"><span class="regexp">    cx.lineWidth = 40;</span></div><div class="line"><span class="regexp">    var length = 600;</span></div><div class="line"><span class="regexp">    var x = 100;</span></div><div class="line"><span class="regexp">    var y = 100;</span></div><div class="line"><span class="regexp">    for (var i = 0; i &lt; length; i++) &#123;</span></div><div class="line"><span class="regexp">        cx.beginPath();</span></div><div class="line"><span class="regexp">        /</span><span class="regexp">/设置绘边颜色</span></div><div class="line"><span class="regexp">        cx.strokeStyle = "rgb(" + Math.round((255 /</span> length) * i) + <span class="string">",0,0)"</span>;</div><div class="line">        cx.moveTo(x + i, y);</div><div class="line">        cx.lineTo(x + i + <span class="number">1</span>, y);</div><div class="line">        cx.stroke();</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h2><p>为每一个x对应一个y<br>最后将所有的x,y对应的点连接起来组成的就是对应x和y关系的曲线了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.0 绘制正弦曲线</span></div><div class="line">    <span class="comment">//var y=sinx;</span></div><div class="line">    <span class="comment">//起点</span></div><div class="line">    cx.moveTo(<span class="number">0</span>, <span class="built_in">Math</span>.sin(<span class="number">0</span>));</div><div class="line">    cas.width = <span class="number">800</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; cas.width; i++) &#123;</div><div class="line">        <span class="keyword">var</span> x = i;</div><div class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.sin(i / <span class="number">10</span>) * <span class="number">200</span> + <span class="number">200</span>;</div><div class="line">        cx.lineTo(x, y);</div><div class="line">    &#125;</div><div class="line">    cx.stroke();</div><div class="line"></div><div class="line"><span class="comment">//2.0 绘制余弦曲线</span></div><div class="line">    <span class="comment">//y=cosx;</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; cas.width; i++) &#123;</div><div class="line">        <span class="keyword">var</span> x = i;</div><div class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.cos(i / <span class="number">20</span>) * <span class="number">200</span> + <span class="number">200</span>;</div><div class="line">        cx.lineTo(x, y);</div><div class="line">    &#125;</div><div class="line">    cx.stroke();</div><div class="line"></div><div class="line"><span class="comment">//3.0 绘制正切函数的曲线</span></div><div class="line">    <span class="comment">//y=tanx</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; cas.width; i++) &#123;</div><div class="line">        <span class="keyword">var</span> x = i;</div><div class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.tan(i / <span class="number">40</span>) * <span class="number">100</span> + <span class="number">200</span>;</div><div class="line">        cx.lineTo(x, y);</div><div class="line">    &#125;</div><div class="line">    cx.stroke();</div></pre></td></tr></table></figure>
<h2 id="绘制画布中的点"><a href="#绘制画布中的点" class="headerlink" title="绘制画布中的点"></a>绘制画布中的点</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 获取canvas标签</span></div><div class="line">   <span class="keyword">var</span> cas = <span class="built_in">document</span>.querySelector(<span class="string">"#c"</span>);</div><div class="line">   <span class="comment">//2. 使用canvas标签获取绘图工具</span></div><div class="line">   <span class="keyword">var</span> ctx = cas.getContext(<span class="string">"2d"</span>); </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawPoint</span>(<span class="params">x, y, width</span>)</span>&#123;</div><div class="line">       ctx.beginPath();  <span class="comment">//为了防止我们画点影响到比人</span></div><div class="line">       width = width || <span class="number">4</span>;</div><div class="line">       ctx.moveTo(x - width / <span class="number">2</span>, y - width / <span class="number">2</span>);</div><div class="line">       ctx.lineTo(x + width / <span class="number">2</span>, y - width / <span class="number">2</span>);</div><div class="line">       ctx.lineTo(x + width / <span class="number">2</span>, y + width / <span class="number">2</span>);</div><div class="line">       ctx.lineTo(x - width / <span class="number">2</span>, y + width / <span class="number">2</span>);</div><div class="line">       ctx.closePath();</div><div class="line">       ctx.fill();</div><div class="line">       ctx.beginPath();  <span class="comment">//为了防止比人影响到我们</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">    drawPoint(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    drawPoint(<span class="number">200</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Canvas-第一篇&quot;&gt;&lt;a href=&quot;#Canvas-第一篇&quot; class=&quot;headerlink&quot; title=&quot;Canvas  第一篇&quot;&gt;&lt;/a&gt;Canvas  第一篇&lt;/h1&gt;&lt;h2 id=&quot;Canvas的基本概念&quot;&gt;&lt;a href=&quot;#Canvas的基
    
    </summary>
    
    
      <category term="canvas的基本使用" scheme="zkh7809956.github.io/tags/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>js异步编程的4中方法</title>
    <link href="zkh7809956.github.io/2017/08/29/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%844%E4%B8%AD%E6%96%B9%E6%B3%95/"/>
    <id>zkh7809956.github.io/2017/08/29/js异步编程的4中方法/</id>
    <published>2017-08-29T13:53:31.000Z</published>
    <updated>2017-08-29T13:56:28.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript异步编程的4中方法"><a href="#javascript异步编程的4中方法" class="headerlink" title="javascript异步编程的4中方法"></a>javascript异步编程的4中方法</h1><hr>
<h2 id="Javascript语言的执行环境是”单线程”（single-thread）"><a href="#Javascript语言的执行环境是”单线程”（single-thread）" class="headerlink" title="Javascript语言的执行环境是”单线程”（single thread）"></a>Javascript语言的执行环境是”单线程”（single thread）</h2><p>​    所谓”单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>
<p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏 览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p>
<p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：</p>
<ol>
<li><p>同步（Synchronous）</p>
<p>“同步模式”就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；”异步模式”则完全 不同，每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结 束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</p>
</li>
<li><p>异步（Asynchronous）</p>
<p>“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，”异步模式”甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</p>
</li>
</ol>
<p>本文总结了”异步模式”编程的4种方法，理解它们可以让你写出结构更合理、性能更出色、维护更方便的Javascript程序。</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>​    这是异步编程最基本的方法。假定有两个函数f1和f2，后者等待前者的执行结果.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">　　　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">　　　　　　<span class="comment">// f1的任务代码</span></div><div class="line">　　　　　　callback();</div><div class="line">　　　　&#125;, <span class="number">1000</span>);</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>​    执行代码就会变成下面的情况</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　f1(f2);</div></pre></td></tr></table></figure>
<p>​    采用这种方式，我们把同步操作变成了异步操作，f1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</p>
<p>回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度<a href="http://en.wikipedia.org/wiki/Coupling_%28computer_programming%29" target="_blank" rel="external">耦合</a>（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>​    这个思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f1.on(<span class="string">'done'</span>, f2);</div></pre></td></tr></table></figure>
<p>上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">　　　　　　<span class="comment">// f1的任务代码</span></div><div class="line">　　　　　　f1.trigger(<span class="string">'done'</span>);</div><div class="line">　　　　&#125;, <span class="number">1000</span>);</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>​    f1.trigger(‘done’)表示，执行完成后，立即触发done事件，从而开始执行f2。</p>
<p>这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以<a href="http://en.wikipedia.org/wiki/Decoupling" target="_blank" rel="external">“去耦合”</a>（Decoupling），有利于实现<a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">模块化</a>。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>
<h3 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h3><p>​    我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做<a href="http://en.wikipedia.org/wiki/Publish-subscribe_pattern" target="_blank" rel="external">“发布/订阅模式”</a>（publish-subscribe pattern），又称<a href="http://en.wikipedia.org/wiki/Observer_pattern" target="_blank" rel="external">“观察者模式”</a>（observer pattern）。</p>
<p>这个模式有多种<a href="http://msdn.microsoft.com/en-us/magazine/hh201955.aspx" target="_blank" rel="external">实现</a>，下面采用的是Ben Alman的<a href="https://gist.github.com/661855" target="_blank" rel="external">Tiny Pub/Sub</a>，这是jQuery的一个插件。</p>
<p>首先，f2向”信号中心”jQuery订阅”done”信号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　jQuery.subscribe(<span class="string">"done"</span>, f2);</div></pre></td></tr></table></figure>
<p>然后，f1进行如下改写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">　　　　　　<span class="comment">// f1的任务代码</span></div><div class="line">　　　　　　jQuery.publish(<span class="string">"done"</span>);</div><div class="line">　　　　&#125;, <span class="number">1000</span>);</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>​    jQuery.publish(“done”)的意思是，f1执行完成后，向”信号中心”jQuery发布”done”信号，从而引发f2的执行。</p>
<p>此外，f2完成执行后，也可以取消订阅（unsubscribe）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery.unsubscribe(<span class="string">"done"</span>, f2);</div></pre></td></tr></table></figure>
<p>这种方法的性质与”事件监听”类似，但是明显优于后者。因为我们可以通过查看”消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>
<h3 id="Promises对象"><a href="#Promises对象" class="headerlink" title="Promises对象"></a>Promises对象</h3><p>​    Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供<a href="http://wiki.commonjs.org/wiki/Promises/A" target="_blank" rel="external">统一接口</a>。</p>
<p>简单说，它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">　　　　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">　　　　　　<span class="comment">// f1的任务代码</span></div><div class="line">　　　　　　dfd.resolve();</div><div class="line">　　　　&#125;, <span class="number">500</span>);</div><div class="line">　　　　<span class="keyword">return</span> dfd.promise;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>​    这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的<a href="http://api.jquery.com/category/deferred-object/" target="_blank" rel="external">配套方法</a>，可以实现许多强大的功能。</p>
<p>比如，指定多个回调函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f1().then(f2).then(f3);</div></pre></td></tr></table></figure>
<p>再比如，指定发生错误时的回调函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f1().then(f2).fail(f3);</div></pre></td></tr></table></figure>
<p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p>
<h2 id="参考链接地址"><a href="#参考链接地址" class="headerlink" title="参考链接地址"></a>参考链接地址</h2><p><em><a href="http://sporto.github.com/blog/2012/12/09/callbacks-listeners-promises/" target="_blank" rel="external">http://sporto.github.com/blog/2012/12/09/callbacks-listeners-promises/</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript异步编程的4中方法&quot;&gt;&lt;a href=&quot;#javascript异步编程的4中方法&quot; class=&quot;headerlink&quot; title=&quot;javascript异步编程的4中方法&quot;&gt;&lt;/a&gt;javascript异步编程的4中方法&lt;/h1&gt;&lt;hr&gt;

    
    </summary>
    
      <category term="javascript" scheme="zkh7809956.github.io/categories/javascript/"/>
    
    
      <category term="异步编程" scheme="zkh7809956.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Promises" scheme="zkh7809956.github.io/tags/Promises/"/>
    
  </entry>
  
  <entry>
    <title>gulp的使用</title>
    <link href="zkh7809956.github.io/2017/08/29/gulp%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>zkh7809956.github.io/2017/08/29/gulp的使用/</id>
    <published>2017-08-29T09:14:16.000Z</published>
    <updated>2017-08-29T09:18:11.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><blockquote>
<p>gulp运行在nodejs环境下，而不是运行在浏览器中。因此使用gulp之前，需要使用npm安装gulp。</p>
</blockquote>
<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>gulp是运行在nodejs环境下，因此需要安装nodejs</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v    #查看node版本</div><div class="line">npm  -v    #查看npm版本</div></pre></td></tr></table></figure>
<h2 id="npm基本使用"><a href="#npm基本使用" class="headerlink" title="npm基本使用"></a>npm基本使用</h2><blockquote>
<p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）</p>
<p><a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>也是全球最大的开源库生态系统，上面管理了javascript相关的将近50W个包。使用非常的方便。</p>
</blockquote>
<h3 id="修改镜像地址"><a href="#修改镜像地址" class="headerlink" title="修改镜像地址"></a>修改镜像地址</h3><p>npm默认访问的<a href="https://www.npmjs.com/，这是国外的网站，访问和下载速度会很慢。" target="_blank" rel="external">https://www.npmjs.com/，这是国外的网站，访问和下载速度会很慢。</a></p>
<p><a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝镜像</a> 这是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 <strong>10分钟</strong> 一次以保证尽量与官方服务同步。在国内，下载速度会得到质的提升</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org --global</div><div class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>
<h3 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h3><ul>
<li>输入<code>npm init</code> 进行初始化<ul>
<li>会生成一个<code>package.json</code>文件。</li>
<li><code>package.json</code>是node项目的配置文件，用于管理包之间的依赖。</li>
</ul>
</li>
<li><code>npm install jquery --save</code>就可以下载jquery的包了<ul>
<li><code>--save</code>会把内容添加到<code>package.json</code>中，默认下载最新版本的jquery</li>
<li><code>npm install jquery@1.12.4 --save</code> 下载指定版本的jquery文件。</li>
<li><code>nmp info jquery</code>查看jquery这个包的信息</li>
</ul>
</li>
<li><code>npm remove 包名称 --save</code> 移除包的依赖，并修改<code>package.json</code></li>
</ul>
<p>关于<code>package.json</code>,npm可以根据该文件，配合<code>npm install</code>命令自动下载依赖的包，不用每次都拷贝依赖的内容，只需要一个<code>package.json</code>即可。</p>
<p>通过npm配合require在node中非常的常用，现在大伙知道安装包的大致步骤即可。</p>
<h2 id="Gulp-前端自动化构建工具"><a href="#Gulp-前端自动化构建工具" class="headerlink" title="Gulp 前端自动化构建工具"></a>Gulp 前端自动化构建工具</h2><blockquote>
<p>Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。</p>
</blockquote>
<h3 id="Gulp能做什么？"><a href="#Gulp能做什么？" class="headerlink" title="Gulp能做什么？"></a>Gulp能做什么？</h3><ul>
<li>less/sass文件转换css文件</li>
<li>html文件、css文件、js文件以及图片的压缩</li>
<li>自动补充属性的前缀。</li>
<li>多浏览器的同步</li>
</ul>
<p>这些操作都需要手动去完成，繁琐但是不难，如果是用了gulp，这些工作只需要一句话就能完成，实行自动化构建，从而提高了工作的效率。</p>
<p><a href="http://www.gulpjs.com/" target="_blank" rel="external">官网</a></p>
<p><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">中文网</a></p>
<p>其他构建工具：Grunt、webpack</p>
<p>gulp的应用场景</p>
<ul>
<li>项目发布前，对项目进行构建</li>
<li>自动完成一系列重复的操作</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">js/css/html文件的压缩，混淆，监视文件变化，同步浏览器等。</div><div class="line">less转换成css文件。</div></pre></td></tr></table></figure>
<h3 id="gulp的使用步骤"><a href="#gulp的使用步骤" class="headerlink" title="gulp的使用步骤"></a>gulp的使用步骤</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">安装nodejs --&gt; 全局安装gulp --&gt; 项目安装gulp以及gulp插件 --&gt; 配置gulpfile.js --&gt; 运行任务</div></pre></td></tr></table></figure>
<h3 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h3><ul>
<li>全局安装gulp<ul>
<li><code>npm install --global gulp</code> 执行gulp命令时能够使用gulp命令<code>-g</code></li>
<li>–global :全局安装在<code>C:\Users\Administrator\AppData\Roaming\npm</code>目录，并且会写入系统变量，可以在任何目录下使用<code>gulp</code>命令</li>
</ul>
</li>
<li>作为项目的开发依赖（devDependencies）安装<ul>
<li><code>npm install --save-dev gulp</code> 本地安装gulp为了使用gulp功能</li>
<li><code>--save</code>与<code>--save-dev</code>的区别，后者只有开发时会使用到，在生产环境中，并不会依赖。</li>
</ul>
</li>
</ul>
<h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">task() <span class="comment">//gulp是以任务为单位实现功能</span></div><div class="line">src()  <span class="comment">//传入路径参数，获取要处理的指定文件</span></div><div class="line">dest() <span class="comment">//指定处理后的文件输出路径</span></div><div class="line">watch()<span class="comment">//监视文件的变化，做出响应的处理。</span></div></pre></td></tr></table></figure>
<p>使用步骤 ：</p>
<ol>
<li>在文件夹的根目录中，创建一个<code>gulpfile.js</code>文件<ol>
<li>文件名固定，因为将来执行gulp命令时，会搜索<code>gulpfile.js</code>文件</li>
</ol>
</li>
<li>在gulpfile.js文件中写gulp任务</li>
<li><code>gulp 任务名称</code>执行gulp任务</li>
</ol>
<h3 id="安装gulp插件"><a href="#安装gulp插件" class="headerlink" title="安装gulp插件"></a>安装gulp插件</h3><ul>
<li><code>gulp-less</code> 将less文件转换成css文件</li>
<li><code>gulp-uglify</code> 压缩和混淆js代码</li>
<li><code>gulp-cssnano</code> 压缩css代码</li>
<li><code>gulp-htmlmin</code> 压缩html代码</li>
<li><code>gulp-rename</code> 文件重命名</li>
</ul>
<p>安装命令：<code>npm install gulp-名称 --save-dev</code>进行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">npm install gulp-less --save-dev</div><div class="line">npm install gulp-uglify --save-dev</div><div class="line">npm install gulp-cssnano --save-dev</div><div class="line">npm install gulp-htmlmin --save-dev</div><div class="line">npm install gulp-rename --save-dev</div><div class="line"></div><div class="line"></div><div class="line">npm install --save-dev gulp-less gulp-uglify gulp-cssnano gulp-htmlmin gulp-rename</div></pre></td></tr></table></figure>
<h2 id="gulp常用插件"><a href="#gulp常用插件" class="headerlink" title="gulp常用插件"></a>gulp常用插件</h2><h3 id="gulp之js压缩"><a href="#gulp之js压缩" class="headerlink" title="gulp之js压缩"></a>gulp之js压缩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 引入gulp的包</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>)</div><div class="line"></div><div class="line"><span class="comment">//2. 创建gulp任务</span></div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//src获取到要压缩的文件，传入数组可以压缩多个文件，路径可以使用通配符</span></div><div class="line">  gulp.src(<span class="string">"./jquery.js"</span>)</div><div class="line">    .pipe( uglify())<span class="comment">//使用uglify插件</span></div><div class="line">    .pipe(rename(&#123; <span class="attr">suffix</span>: <span class="string">'.min'</span> &#125;))    <span class="comment">//使用rename插件，压缩后的文件会带上.min后缀</span></div><div class="line">    .pipe( gulp.dest(<span class="string">"./dist"</span>) );<span class="comment">//dest:指定输出路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后：在gulpfile.js所在的目录执行<code>gulp js</code>命令即可。</p>
<h3 id="gulp之less转css"><a href="#gulp之less转css" class="headerlink" title="gulp之less转css"></a>gulp之less转css</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);;</div><div class="line"><span class="comment">//less转css任务</span></div><div class="line">gulp.task(<span class="string">"less"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(<span class="string">"./less/index.less"</span>)</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(gulp.dest(<span class="string">"./css"</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="gulp之html压缩"><a href="#gulp之html压缩" class="headerlink" title="gulp之html压缩"></a>gulp之html压缩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">"html"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(<span class="string">"./index.html"</span>)</div><div class="line">    .pipe(htmlmin(&#123;</div><div class="line">      collapseWhitespace: <span class="literal">true</span>,</div><div class="line">      minifyCSS:<span class="literal">true</span>,</div><div class="line">      minifyJS:<span class="literal">true</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">"./dist"</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="同时执行多个任务"><a href="#同时执行多个任务" class="headerlink" title="同时执行多个任务"></a>同时执行多个任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 同时执行多个任务，default是默认的名字，可以直接使用gulp命令执行。</span></div><div class="line">gulp.task(<span class="string">"default"</span>, [<span class="string">"js"</span>,<span class="string">"less"</span>,<span class="string">"html"</span>],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"任务执行完毕"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>思考：将gulp应用到博学谷中</p>
<h3 id="gulp之Broswer-sync"><a href="#gulp之Broswer-sync" class="headerlink" title="gulp之Broswer-sync"></a>gulp之Broswer-sync</h3><p><a href="http://www.browsersync.cn/docs/gulp/" target="_blank" rel="external">Browsersync + Gulp.js</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</div><div class="line"></div><div class="line"><span class="comment">// 静态服务器</span></div><div class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        server: &#123;</div><div class="line">            baseDir: <span class="string">"./"</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 代理</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        proxy: <span class="string">"你的域名或IP"</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;gulp&quot;&gt;&lt;a href=&quot;#gulp&quot; class=&quot;headerlink&quot; title=&quot;gulp&quot;&gt;&lt;/a&gt;gulp&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;gulp运行在nodejs环境下，而不是运行在浏览器中。因此使用gulp之前，需要使用npm安装g
    
    </summary>
    
      <category term="gulp" scheme="zkh7809956.github.io/categories/gulp/"/>
    
    
      <category term="gulp" scheme="zkh7809956.github.io/tags/gulp/"/>
    
      <category term="npm" scheme="zkh7809956.github.io/tags/npm/"/>
    
      <category term="Broswer-sync" scheme="zkh7809956.github.io/tags/Broswer-sync/"/>
    
  </entry>
  
  <entry>
    <title>跨域之反向代理</title>
    <link href="zkh7809956.github.io/2017/08/20/%E8%B7%A8%E5%9F%9F%E4%B9%8B%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>zkh7809956.github.io/2017/08/20/跨域之反向代理/</id>
    <published>2017-08-20T00:49:55.000Z</published>
    <updated>2017-08-20T00:56:02.365Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">通过php的`<span class="keyword">include</span>`将页面引入进来即可。</div><div class="line"></div><div class="line">问题：html页面并不能识别`<span class="meta">&lt;?php</span> <span class="meta">?&gt;</span>`标签，只有php文件才能识别，应该怎么办？</div><div class="line"></div><div class="line"><span class="comment">## index.php</span></div><div class="line"></div><div class="line">通过index.php的<span class="keyword">include</span>解决html文件无法识别`<span class="meta">&lt;?php</span> <span class="meta">?&gt;</span>`标签的问题</div><div class="line"></div><div class="line"><span class="comment">### 基本功能</span></div><div class="line"></div><div class="line">```php</div><div class="line">$path = $_SERVER[<span class="string">'PATH_INFO'</span>];</div><div class="line"><span class="comment">//去除第一个/</span></div><div class="line">$path = substr($path, <span class="number">1</span>);</div><div class="line"><span class="comment">//对路径信息进行切割</span></div><div class="line">$arr = explode(<span class="string">"/"</span>, $path);</div><div class="line"><span class="comment">//通过include引入对应的html文件，这样引入的html文件就可以识别html标签了</span></div><div class="line"><span class="keyword">include</span> <span class="string">'/views/'</span> . $arr[<span class="number">0</span>] .<span class="string">"/"</span>. $arr[<span class="number">1</span>] . <span class="string">".html"</span>;</div></pre></td></tr></table></figure>
<h3 id="路径中省略index-php"><a href="#路径中省略index-php" class="headerlink" title="路径中省略index.php"></a>路径中省略index.php</h3><p><a href="http://www.jb51.net/article/52956.htm" target="_blank" rel="external">Rewrite</a>主要的功能就是实现URL的跳转和隐藏真实地址，基于Perl语言的正则表达式规范。平时帮助我们实现拟静态，虚拟目录，域名跳转，防止盗链等</p>
<ol>
<li>开启apache服务器的<code>rewrite</code>功能。找到<code>httpd.conf</code>文件的151行。去掉<code>LoadModule rewrite_module modules/mod_rewrite.so</code>的注释</li>
<li>将<code>.htaccess</code>文件放到根目录即可。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line">  Options +FollowSymlinks -Multiviews</div><div class="line">  RewriteEngine On</div><div class="line"></div><div class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class="line">  # 无论地址栏输入了什么东西，最终都是访问到了index.php页面。</div><div class="line">  RewriteRule ^(.*)$ index.php/$<span class="number">1</span> [QSA,PT,L]</div><div class="line">&lt;<span class="regexp">/IfModule&gt;</span></div></pre></td></tr></table></figure>
<h3 id="优化index-php页面"><a href="#优化index-php页面" class="headerlink" title="优化index.php页面"></a>优化index.php页面</h3><ul>
<li>bxg.com          对应views/index/index.html</li>
<li>bxg.com/login    对应views/index/login.html</li>
<li>bxg.com/teacher/add  对应views/teacher/add.html</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取路径信息</span></div><div class="line"><span class="keyword">if</span> (array_key_exists(<span class="string">"PATH_INFO"</span>, $_SERVER)) &#123;</div><div class="line">    $path = $_SERVER[<span class="string">'PATH_INFO'</span>];</div><div class="line">    <span class="comment">//去除第一个/</span></div><div class="line">    $path = substr($path, <span class="number">1</span>);</div><div class="line">    <span class="comment">//对路径信息进行切割</span></div><div class="line">    $arr = explode(<span class="string">"/"</span>, $path);</div><div class="line"></div><div class="line">    <span class="comment">//如果路径信息，有两个值，那么就对应2级的目录</span></div><div class="line">    <span class="keyword">if</span> (count($arr) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">include</span> <span class="string">'/views/'</span> . $arr[<span class="number">0</span>] . <span class="string">"/"</span> . $arr[<span class="number">1</span>] . <span class="string">".html"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果路径信息只有一个，那么默认跳转到index目录</span></div><div class="line">    <span class="keyword">if</span> (count($arr) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">include</span> <span class="string">"/views/index/"</span> . $arr[<span class="number">1</span>] . <span class="string">".html"</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//如果没有路径信息，那么直接对应/views/index/index.html</span></div><div class="line">    <span class="keyword">include</span> <span class="string">'/views/index/index.html'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>提交git，推送到github</strong> </p>
<h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>jsonp</li>
<li>cors</li>
<li>反向代理</li>
</ul>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理（Reverse Proxy）方式是指以<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="external">代理服务器</a>来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>
<img src="/2017/08/20/跨域之反向代理/proxy.png" alt="反向代理" title="反向代理">
<p>反向代理是一种跨域的方案，这种方案是通过后台配置进行实现的，配置后不需要前端做任何的使用。</p>
<ul>
<li>服务端开发完成的接口已经部署到公网上，并没有和前端页面部署到同一台服务器。</li>
<li>接口域名和前端页面不在同一个域名下，所以前端使用ajax请求访问时，浏览器会报跨域错误。</li>
</ul>
<p>反向代理的配置：</p>
<ul>
<li>打开<code>httpd-conf</code>文件,去掉135行和143行的注释</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LoadModule proxy_module modules/mod_proxy.so</div><div class="line">LoadModule proxy_http_module modules/mod_proxy_http.so</div></pre></td></tr></table></figure>
<ul>
<li>修改 <code>D:\phpStudy\Apache\conf\extra\httpd-vhosts.conf</code> 文件，找到bxg对应的配置，添加以下代码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 关闭正向代理</div><div class="line">ProxyRequests off</div><div class="line"># 开启反向代理，当服务器碰到/api的请求之后，会帮我们替换成http://api.botue.com/v8，并且发送请求获取数据。</div><div class="line">ProxyPass /api http:<span class="comment">//api.botue.com/v8</span></div></pre></td></tr></table></figure>
<p>反向代理的原理</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="images/proxy.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="HTTP状态保持"><a href="#HTTP状态保持" class="headerlink" title="HTTP状态保持"></a>HTTP状态保持</h1><h2 id="HTTP协议是无状态的"><a href="#HTTP协议是无状态的" class="headerlink" title="HTTP协议是无状态的"></a>HTTP协议是无状态的</h2><p><a href="https://baike.baidu.com/item/HTTP%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE/5808645?fr=aladdin" target="_blank" rel="external">HTTP无状态协议</a>，是指协议对于事务处理没有记忆能力。当我们给服务器发送请求，服务器根据请求响应对应的数据，但是服务器不会记录任何的信息。</p>
<p>对于一个浏览器，发出的多次请求，web服务器无法区分是不是来源于同一个服务器。</p>
<p>服务器不会记录客户端的信息，每次请求的状态仅限于当次的请求，下次请求时，服务器会把浏览器当成一个新的会话进行处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- 公交车司机不会记住每天上车的乘客。</div><div class="line">- 自动售货机不会记录每次买东西的客户。</div><div class="line">- 服务器不会记住每次浏览器请求的状态。</div></pre></td></tr></table></figure>
<p>好处：服务器不需要先前的信息，应答会比较快</p>
<p>缺点：如果后续的请求需要前面的信息，会导致每次传送的数据量变大。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http协议是无状态的，那么当我们登录之后，服务器无法记录我们是否登录过，难道每次操作都需要用户重新登录么？应该怎么解决这个问题？</div></pre></td></tr></table></figure>
<h2 id="状态保持"><a href="#状态保持" class="headerlink" title="状态保持"></a>状态保持</h2><p>HTTP无状态的特性有时候严重的阻碍了某些功能的实现，因为交互是需要承前启后的。</p>
<ul>
<li>一个网站需要登录，但是在你登录过后，因为是无状态的，导致下个请求，服务端还是无法识别你的身份。</li>
<li>一个简单的购物车功能，在你选好了商品，跳转到结算页面时，浏览器无法确定用户之前选择了什么商品。</li>
</ul>
<p><strong>HTTP是无状态的，因此两种用于保持HTTP状态的技术就应运而生了，一个是Cookie，一个是Session，我们可以通过Cookie和Session存储一些额外的信息，从而达到保持HTTP状态的目的。</strong></p>
<p>喝咖啡的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">一家咖啡厅有一个长期的活动，只要喝满<span class="number">5</span>杯咖啡，就可以赠送一杯咖啡，当然一次性消费<span class="number">5</span>杯咖啡基本不可能。但是咖啡的消费数量可以累计。但是服务员又不可能每次记下来所有的客人喝了多少的咖啡。应该什么时候赠送免费的咖啡。应该如何解决这个问题？</div><div class="line"><span class="number">1.</span> 咖啡厅给客户一张卡片，卡片都会有一个唯一的卡号，一般还有一个有效的期限。（客户保存卡号信息：Cookie）</div><div class="line"><span class="number">2.</span> 咖啡厅用一个本子，记录下来每张卡片的消费数量和消费信息。（咖啡厅保存消费信息：Session）</div><div class="line"><span class="number">3.</span> 每次消费时，客户只需要出示卡片，咖啡厅根据卡号就能查询出客户的消费信息，并且修改这些消费信息。（Cookie+Seesion实现状态的保持）</div><div class="line"><span class="number">4.</span> 这样就能够实现咖啡厅记录每一个客户的消费状态了。</div></pre></td></tr></table></figure>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="cookie概念"><a href="#cookie概念" class="headerlink" title="cookie概念"></a>cookie概念</h3><p>Cookie是客户端保持状态的解决方案。Cookie存储了服务端发送给客户端的一些特殊信息，这些信息以文本的方式存储在客户端。客户端每次向服务器发送请求时都会带上这些特殊的信息。</p>
<ul>
<li>Cookie是记录在客户端的一小段文本信息，伴随这用户请求，会在浏览器和服务器之间传递。</li>
<li>Cookie是以域名为单位存储的，每个域名之间的Cookie之间是相互隔离的，也就是说不同域名之间的Cookie是不可以相互操作的（同源策略）</li>
<li>必须通过http协议访问页面，才能访问到cookie中的内容。</li>
<li>cookie有大小限制，不会超过4kb，不要存储大量数据。</li>
<li>一个域名下的cookie是在该域名下所有的页面都可以访问的。子路径中可以访问父路径中存储的cookie，但是父路径中无法访问子路径中的cookie，一半情况下，我们会直接把cookie存储到域名的根目录下，这样，该域名下所有的页面都可以访问了。</li>
</ul>
<h3 id="js操作cookie"><a href="#js操作cookie" class="headerlink" title="js操作cookie"></a>js操作cookie</h3><p>cookie其实就是一个document的一个属性，cookie是一个字符串，这个字符串有特定的格式。<br>cookie的格式： key=value;key=value;key=value;</p>
<ul>
<li>设置cookie</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置cookie，设置多个cookie，不是覆盖，而是追加操作</span></div><div class="line"><span class="comment">//设置的cookie默认是会话级别的，即浏览器关闭就失效</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"name=zs"</span>;</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"age=18"</span>;</div><div class="line"></div><div class="line"><span class="comment">//设置过期时间 </span></div><div class="line"><span class="comment">// max-age:1  单位秒  7 * 60 * 60 * 24</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"desc=hehe;max-age=60"</span>;</div><div class="line"><span class="comment">// expires: 指定过期的具体日期（不推荐）</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"desc=hehe;expires="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2017-08-04 23:59:59"</span>);</div><div class="line"></div><div class="line"><span class="comment">//设置访问路径,通常都会设置成/，因为这样才能保证该网站下所有的页面都能获取到cookie。</span></div><div class="line"><span class="comment">//cookie的访问规则：子路径中可以访问父路径中存储的cookie，但是父路径中无法访问子路径中的cookie</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"desc=hehe;max-age=60;path=/"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>获取cookie</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取到的cookie格式为：desc=hehe; name=zs; age=18</span></div><div class="line"><span class="comment">//如果想要获取指定的cookie，需要对字符串进行切割，太麻烦</span></div><div class="line">consoloe.log(<span class="built_in">document</span>.cookie);</div></pre></td></tr></table></figure>
<ul>
<li>删除cookie</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//cookie无法覆盖，因此无法直接删除，通过我们删除一个cookie的操作就是设置max-age:-1即可。</span></div><div class="line"> <span class="built_in">document</span>.cookie = <span class="string">"age=18;max-age=-1;path=/"</span>;</div></pre></td></tr></table></figure>
<p>总结：使用原生js操作cookie太过于麻烦。通常我们都会使用jquery.cookie插件操作cookie</p>
<h3 id="jquery操作cookie"><a href="#jquery操作cookie" class="headerlink" title="jquery操作cookie"></a>jquery操作cookie</h3><p>jquery.cookie.js插件是一个专门用于操作cookie的一个插件，使用起来非常的方便和简单。</p>
<p><a href="https://plugins.jquery.com/cookie/" target="_blank" rel="external">官方网站</a></p>
<p><a href="https://plugins.jquery.com/cookie/" target="_blank" rel="external">github地址</a></p>
<ul>
<li>设置cookie</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置一个会话级别的cookie，浏览器关闭就消失</span></div><div class="line">$.cookie(<span class="string">'name'</span>, <span class="string">'value'</span>);</div><div class="line"></div><div class="line"><span class="comment">//设置一个7天有效期的cookie</span></div><div class="line"><span class="comment">//expires也可以指定一个具体的过期时间</span></div><div class="line">$.cookie(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">//设置cookie的有效期和路径</span></div><div class="line">$.cookie(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">'/'</span> &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>获取cookie</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果存在，返回对应的值</span></div><div class="line">$.cookie(<span class="string">'name'</span>); <span class="comment">// =&gt; "value"</span></div><div class="line"><span class="comment">//如果不存在，返回undefined</span></div><div class="line">$.cookie(<span class="string">'nothing'</span>); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line"><span class="comment">//获取所有的额cookie</span></div><div class="line">$.cookie(); <span class="comment">// =&gt; &#123; "name": "value" &#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>移除cookie</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移除cookie，如果成功，返回true，否则false</span></div><div class="line">$.removeCookie(<span class="string">'name'</span>); <span class="comment">// =&gt; true</span></div><div class="line">$.removeCookie(<span class="string">'nothing'</span>); <span class="comment">// =&gt; false</span></div><div class="line"></div><div class="line"><span class="comment">// 如果路径不同时，需要指定路径</span></div><div class="line">$.cookie(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;);</div><div class="line"><span class="comment">// 移除失败</span></div><div class="line">$.removeCookie(<span class="string">'name'</span>); <span class="comment">// =&gt; false</span></div><div class="line"><span class="comment">// 移除成功</span></div><div class="line">$.removeCookie(<span class="string">'name'</span>, &#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;); <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure>
<p>思考：cookie的用途是什么？ 实现不同页面之间的数据共享</p>
<h3 id="php操作cookie（了解）"><a href="#php操作cookie（了解）" class="headerlink" title="php操作cookie（了解）"></a>php操作cookie（了解）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每次请求，浏览器都会讲cookie发送给服务器。</span></div><div class="line"><span class="comment">//$_COOKIE是一个伪数组，里面存放了所有的cookie信息。</span></div><div class="line">print_r($_COOKIE);</div><div class="line"></div><div class="line"><span class="comment">//设置cookie,</span></div><div class="line"><span class="comment">//实质：响应头中添加了set-cookie, 最终还是浏览器添加的这个cookie</span></div><div class="line">setcookie(<span class="string">"age"</span>, <span class="string">"18"</span>);</div></pre></td></tr></table></figure>
<p>php对于cookie的具体操作，我们不需要深究，我们只需要知道一点，服务器可以操作cookie，实质是通过响应头，让浏览器操作cookie。</p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>与cookie相对的一个技术是session，它是通过服务器来保持状态的。session这个单词包含的意思有很多。</p>
<ul>
<li>Session指的是服务器端为客户端所开辟的存储空间，在其中保存的信息就是用于保持状态</li>
<li>我们需要关注如何往session中存放东西，如果从session中获取东西。</li>
<li>session会为客户端的请求开辟一个小空间，用于存储信息，每一个空间都会有一个唯一的id</li>
</ul>
<h3 id="session的操作"><a href="#session的操作" class="headerlink" title="session的操作"></a>session的操作</h3><ul>
<li>开启session</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 开启session</span></div><div class="line">session_start();</div><div class="line"></div><div class="line"><span class="comment">//2. 设置内容</span></div><div class="line">$_SESSION[<span class="string">"name"</span>] = <span class="string">"zhangsan"</span>;</div><div class="line">$_SESSION[<span class="string">"age"</span>] = <span class="number">18</span>;</div><div class="line"></div><div class="line"><span class="comment">//3. 获取session</span></div><div class="line"><span class="keyword">echo</span> $_SESSION[<span class="string">"name"</span>];</div><div class="line"></div><div class="line"><span class="comment">//4. 同一个服务器中，session也是可以共享的</span></div></pre></td></tr></table></figure>
<p>问题：http是无状态的，为什么session也可以进行数据共享？</p>
<h3 id="cookie和session实现状态保持"><a href="#cookie和session实现状态保持" class="headerlink" title="cookie和session实现状态保持"></a>cookie和session实现状态保持</h3><ul>
<li>第一次访问服务器的时候，<code>session_start()</code>函数会生成一个<code>PHPSESSID</code>,返回给客户端</li>
<li>客户端会将<code>PHPSESSID</code>保存下来，每次请求都会带上cookie</li>
<li>下次请求时，服务器通过<code>PHPSESSID</code>就可以确认客户端的身份了。</li>
<li>状态保持，cookie和session缺一不可，不然无法实现。</li>
</ul>
<h3 id="session的过期时间（了解）"><a href="#session的过期时间（了解）" class="headerlink" title="session的过期时间（了解）"></a>session的过期时间（了解）</h3><p>在<code>php.ini</code>配置文件中有一个<code>gc_maxlifetime:1440</code>，如果<code>PHPSESSID</code>的最后修改时间操作了1440秒，那么这个session就会被认为过期了，那么这个session就会被删除。</p>
<p>简单的说，如果我登录到某网站，如果在1440秒（默认值）内没有操作过，那么对应的session就认为是过期了。我们可以通过修改 <code>gc_maxlifetime</code>来延长过期时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
      <category term="git" scheme="zkh7809956.github.io/categories/git/"/>
    
    
      <category term="反向代理" scheme="zkh7809956.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="HTTP状态保持" scheme="zkh7809956.github.io/tags/HTTP%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81/"/>
    
      <category term="跨域" scheme="zkh7809956.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="cookie" scheme="zkh7809956.github.io/tags/cookie/"/>
    
      <category term="session" scheme="zkh7809956.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>模块化</title>
    <link href="zkh7809956.github.io/2017/08/18/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>zkh7809956.github.io/2017/08/18/模块化/</id>
    <published>2017-08-18T12:22:30.000Z</published>
    <updated>2017-08-18T04:55:29.092Z</updated>
    
    <content type="html"><![CDATA[<p>#模块化</p>
<p>模块就是实现一个特定功能的一组代码，通常一个文件就是一个模块，我们前端模块化中，一个模块指的就是一个js文件。</p>
<p>模块化是把一个复杂的应用分解为很多的可管理的模块。</p>
<h2 id="为什么要有模块化"><a href="#为什么要有模块化" class="headerlink" title="为什么要有模块化"></a>为什么要有模块化</h2><p>模块化最早出现在服务端语言中，因为服务端的逻辑通常都非常的复杂，如果不使用模块进行管理，那么系统会变得难以维护。</p>
<p>现在的网站越来越复杂，功能越来越强大，嵌入网页的Javascript代码越来越庞大，越来越复杂。</p>
<img src="/2017/08/18/模块化/dianxian.jpg" alt="剪不断理还乱" title="剪不断理还乱">
<p>前端模块化编程，已经成为一个迫切的需求。理想情况下，不同的开发者只需要实现不同核心的业务逻辑，其他都可以加载别人已经写好的模块。</p>
<p>因此最简单的模块化做法就是：把一个独立的功能的所有js代码放到一个单独的JS文件中，这就算是一个模块了。使用的时候只需要引入这个js文件即可。</p>
<ul>
<li>容易造成全局变量污染</li>
<li>模块之间的依赖关系必须靠程序员自己维护。</li>
</ul>
<p><strong>模块化的使用场景：在复杂的项目，越适合，如果是非常简单的项目，可以不使用模块化</strong></p>
<h2 id="模块化的标准"><a href="#模块化的标准" class="headerlink" title="模块化的标准"></a>模块化的标准</h2><p>有了模块，我们就可以更方便地使用别人的代码,想要什么功能，就加载什么模块。这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！ 【螺丝与螺帽】</p>
<ul>
<li>CommonJS：是一个模块化的标准，Node.js在使用的模块化标准。适用与后端开发的标准。</li>
<li>AMD（Async Module Definition）：在CommonJS基础上衍生出来的适用于前端开发的模块化标准。<ul>
<li>特点：预加载，第一次访问时，将所有的文件都加载出来。</li>
<li>优点：第一次访问完成以后，再次访问速度会很快</li>
<li>缺点：第一次加载，需要的时间会比较长</li>
<li>代表：requirejs</li>
</ul>
</li>
<li>CMD（Common Module Definition）：在CommonJS基础上衍生出来的适用于前端开发的模块化标准。<ul>
<li>特点：懒加载，只有使用到的时候，才会加载对应的模块。</li>
<li>优点：第一次访问速度会比较快</li>
<li>缺点：再次访问其他模块时会比较慢。</li>
<li>代表：seajs  </li>
</ul>
</li>
</ul>
<h1 id="require-JS"><a href="#require-JS" class="headerlink" title="require.JS"></a>require.JS</h1><h2 id="require-js概念"><a href="#require-js概念" class="headerlink" title="require.js概念"></a>require.js概念</h2><p>requirejs是AMD规范的一个实现，require.js是一个javascript文件，也是一个模块加载器。<strong>模块加载器：相当于canvas中封装的图片加载器，只不过一个是加载图片的，一个加载js，文件的类型不一样。</strong> </p>
<p><a href="http://requirejs.org/" target="_blank" rel="external">官网地址</a></p>
<p><a href="https://github.com/requirejs/requirejs" target="_blank" rel="external">github地址</a></p>
<p>requirejs主要提供两大功能：</p>
<ul>
<li>加载模块：可以加载AMD规范的模块，也可以是普通的模块，异步加载，并且能够管理模块之间的依赖。</li>
<li>规范了模块的定义：有助于不同模块之间的共享与依赖。</li>
</ul>
<p>requirejs的优点：</p>
<ul>
<li>提高了javascript文件的加载速度，避免不必要的堵塞。</li>
<li>独特的模块定义方式可以避免全局变量污染。</li>
<li>独特的模块定义方式可以在脚本层面声明模块之间的依赖。</li>
</ul>
<h2 id="requirejs初体验"><a href="#requirejs初体验" class="headerlink" title="requirejs初体验"></a>requirejs初体验</h2><p><strong>一、引入js文件</strong> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--1. 引入require.js文件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>二、定义模块</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在a.js文件中</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"a模块加载了"</span>);</div></pre></td></tr></table></figure>
<p><strong>三、引用模块</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//require会自动找当前目录下的js文件，a是文件名，不能写后缀。</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"a"</span>]);</div></pre></td></tr></table></figure>
<h2 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h2><p>requirejs一共对外暴露三个全局变量 </p>
<ol>
<li>requirejs  - 用于加载模块</li>
<li>require     - 用于加载模块</li>
<li>define      - 用于定义模块</li>
</ol>
<p><strong><code>require</code>和<code>requirejs</code>是同一个函数，类似于<code>$</code>和<code>jQuery</code>的关系</strong> </p>
<h3 id="require加载模块"><a href="#require加载模块" class="headerlink" title="require加载模块"></a>require加载模块</h3><ul>
<li>作用：加载模块（amd模块或者是普通模块）</li>
<li>加载普通模块，模块加载完是会执行一遍的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数：数组，需要加载的模块，异步加载的</span></div><div class="line"><span class="comment">//第二个参数：回调函数，在模块都加载完毕之后，回调函数才会执行</span></div><div class="line"><span class="comment">//require(["js/a", "js/b", "js/c"]);</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"js/a"</span>, <span class="string">"js/b"</span>, <span class="string">"js/c"</span>],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"我是最后执行的"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="define定义模块"><a href="#define定义模块" class="headerlink" title="define定义模块"></a>define定义模块</h3><p>使用define函数可以定义一个AMD规范的模块</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数：模块的依赖</span></div><div class="line"><span class="comment">//第二个参数：模块的主体</span></div><div class="line">define([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"a模块加载了"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>好处：require独特的定义方式，避免了全局变量的污染。</p>
<h3 id="模块之间的依赖"><a href="#模块之间的依赖" class="headerlink" title="模块之间的依赖"></a>模块之间的依赖</h3><p>在使用define定义一个模块时，如果模块依赖于另一个模块，我们可以通过define的第一个参数去指定。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数：本模块依赖的模块列表  路径是以html的路径为基准</span></div><div class="line"><span class="comment">//第二个参数：模块的主体</span></div><div class="line">define([<span class="string">"js/a"</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"a模块依赖与b模块"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>优点：可以在声明模块的时候就可以定义好依赖，那么使用的时候，就不用在管模块之间的依赖了。使用起来会更加的方便。</p>
<h3 id="模块的输出（对外暴露的东西）"><a href="#模块的输出（对外暴露的东西）" class="headerlink" title="模块的输出（对外暴露的东西）"></a>模块的输出（对外暴露的东西）</h3><p>如果模块仅仅是执行一些代码实现某个功能，那么直接引入该模块，实现对应的功能即可，不需要返回值。如果该模块的存在是为了提供一些方法、对象或者其他一些内容，那么这个模块需要返回值。</p>
<p>在定义模块的时候，我们通常需要对外返回一些内容，因为使用define定义模块，实质就是一个函数，因此可以使用<code>return</code>返回模块的输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">define([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> util = &#123;</div><div class="line">    sayHello:<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"大家好，我是"</span>+name);</div><div class="line">    &#125;,</div><div class="line">    sleep:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"好困啊，我想要睡觉"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//通过return返回模块的输出</span></div><div class="line">  <span class="keyword">return</span> util;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>想要获取模块的输出，在function中传递形参即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参数1：加载的模块列表</span></div><div class="line"><span class="comment">//参数2：模块加载完成后，会执行的回调函数,形参就是模块的返回值</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"b"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">util</span>) </span>&#123;</div><div class="line">  util.sayHello(<span class="string">"张三"</span>);</div><div class="line">  util.sleep();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果依赖于多个模块，应该怎么办？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 如果依赖于多个模块，并且多个模块都有输出，那么我们需要使用参数一一对应，</span></div><div class="line"><span class="comment">//2. 这样就可以获取到多个模块的输出了。</span></div><div class="line"><span class="comment">//3. 即便某个模块没有输出，我们也要指定一个参数占着位置。</span></div><div class="line"><span class="comment">//4. 通常我们会把有输出的模块写在前面，没有输出的模块写在后面。这样方便写参数。</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"js/util"</span>, <span class="string">"js/common"</span>, <span class="string">"js/test"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">util, demo</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(util);</div><div class="line">  <span class="built_in">console</span>.log(demo);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="配置路径和别名"><a href="#配置路径和别名" class="headerlink" title="配置路径和别名"></a>配置路径和别名</h3><ul>
<li>使用require来加载某个模块时，路径会以当前html文件作为参考。</li>
<li>require可以使用config来配置一些内容，比如基础路径</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  <span class="comment">//1. 配置所有模块的基础路径，该路径相对于引入了requirejs的html文件的路径。</span></div><div class="line">  <span class="comment">//2. 所有的路径都会自动的拼上baseUrl</span></div><div class="line">  baseUrl:<span class="string">"js/"</span>,</div><div class="line">  <span class="comment">//1. 给模块起别名，方便使用，在依赖的模块中也能使用</span></div><div class="line">  paths:&#123;</div><div class="line">    <span class="string">"common"</span>:<span class="string">"common/common"</span>,</div><div class="line">    <span class="string">"util"</span>:<span class="string">"util/util"</span>,</div><div class="line">    <span class="string">"test"</span>:<span class="string">"login/test"</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//引入模块时，只需要直接引入模块的别名即可。</span></div><div class="line"><span class="built_in">require</span>([<span class="string">"common"</span>, <span class="string">"util"</span>, <span class="string">"test"</span>],<span class="function"><span class="keyword">function</span> (<span class="params">demo, util</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(demo);</div><div class="line">  <span class="built_in">console</span>.log(util);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="加载非AMD规范的模块"><a href="#加载非AMD规范的模块" class="headerlink" title="加载非AMD规范的模块"></a>加载非AMD规范的模块</h3><p>requirejs可以通过require函数加载模块。在加载不是AMD规范的模式时，会出现问题，需要做特殊的处理。</p>
<p>市面上有很多模块，并没有实现AMD模块化规范，没有实现模块化的模块也可以使用requirejs去加载，但是require加载时，仅仅会执行这个js文件，并不能帮助这个模块实现依赖的加载，也无法获取到这个模块的输出。</p>
<p>我们可以通过require.config为没实现AMD规范加载依赖项。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  baseUrl:<span class="string">"js/"</span>,</div><div class="line">  path:&#123;</div><div class="line">    <span class="string">"base"</span>:<span class="string">"base"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//垫：配置普通模块的依赖与输出</span></div><div class="line">  shim:&#123;</div><div class="line">    <span class="string">"base"</span>:&#123;</div><div class="line">      <span class="comment">//配置普通模块的依赖项</span></div><div class="line">      deps:[<span class="string">"依赖项1"</span>,<span class="string">"依赖项2"</span>],</div><div class="line">      <span class="comment">//配置模块的输出</span></div><div class="line">      exports: <span class="string">"输出结果"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="使用模块化加载jquery"><a href="#使用模块化加载jquery" class="headerlink" title="使用模块化加载jquery"></a>使用模块化加载jquery</h3><p>想使用模块化加载第三方库的时候，首先需要检查第第三方库是否支持模块化。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="images/jquery.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图，说明这个第三方库是支持模块化的，可以直接使用require进行加载。</p>
<p>具名模块与匿名模块</p>
<p>define声明时，第一个参数可以是该模块的名字，如果声明了模块名，在配置时，模块别名就不能够调整了。</p>
<p><a href="http://www.2cto.com/kf/201410/344627.html" target="_blank" rel="external">requireJS的匿名模块和命名模块的差别和最佳实践</a></p>
<p>【练习：使用jquery与jquery.color插件实现颜色的渐变效果】</p>
<h1 id="博学谷环境搭建"><a href="#博学谷环境搭建" class="headerlink" title="博学谷环境搭建"></a>博学谷环境搭建</h1><h2 id="设置虚拟主机"><a href="#设置虚拟主机" class="headerlink" title="设置虚拟主机"></a>设置虚拟主机</h2><ul>
<li>在C盘的www目录，新建了一个<code>boxuegu</code>文件夹</li>
</ul>
<ul>
<li><code>D:\phpStudy\Apache\conf\extra</code>目录下找到<code>httpd-vhosts.conf</code>,打开编辑</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</div><div class="line">    ServerAdmin webmaster@dummy-host.example.com</div><div class="line">    #根目录</div><div class="line">    DocumentRoot <span class="string">"C:\www\boxuegu"</span></div><div class="line">    #域名</div><div class="line">    ServerName boxuegu.com</div><div class="line">    #完整域名</div><div class="line">    ServerAlias www.boxuegu.com</div><div class="line">    ErrorLog <span class="string">"logs/dummy-host.example.com-error.log"</span></div><div class="line">    CustomLog <span class="string">"logs/dummy-host.example.com-access.log"</span> common</div><div class="line">&lt;<span class="regexp">/VirtualHost&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>修改host文件，<code>C:\Windows\System32\drivers\etc</code>找到<code>hosts</code>文件,添加以下内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> boxuegu.com</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> www.boxuegu.com</div></pre></td></tr></table></figure>
<p><strong>注意：如果提示没有权限保存，先把hosts文件复制到桌面上，进行修改，修改完成之后，再拖回去，覆盖即可。</strong> </p>
<ul>
<li>重启服务器，进行测试</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#模块化&lt;/p&gt;
&lt;p&gt;模块就是实现一个特定功能的一组代码，通常一个文件就是一个模块，我们前端模块化中，一个模块指的就是一个js文件。&lt;/p&gt;
&lt;p&gt;模块化是把一个复杂的应用分解为很多的可管理的模块。&lt;/p&gt;
&lt;h2 id=&quot;为什么要有模块化&quot;&gt;&lt;a href=&quot;#为什么要
    
    </summary>
    
      <category term="AMD" scheme="zkh7809956.github.io/categories/AMD/"/>
    
    
      <category term="amd" scheme="zkh7809956.github.io/tags/amd/"/>
    
      <category term="requireJs" scheme="zkh7809956.github.io/tags/requireJs/"/>
    
  </entry>
  
  <entry>
    <title>http服务与ajax编程</title>
    <link href="zkh7809956.github.io/2017/08/18/http%E6%9C%8D%E5%8A%A1%E4%B8%8Eajax%E7%BC%96%E7%A8%8B/"/>
    <id>zkh7809956.github.io/2017/08/18/http服务与ajax编程/</id>
    <published>2017-08-18T08:59:08.000Z</published>
    <updated>2017-08-19T05:48:11.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><blockquote>
<p>前言：通俗的讲，能够提供某种服务的机器（计算机）称为服务器</p>
</blockquote>
<h2 id="服务器软件"><a href="#服务器软件" class="headerlink" title="服务器软件"></a>服务器软件</h2><blockquote>
<p>使计算机具备提供某种服务能力的应用软件，称为服务器软件，<br>通过安装相应的服务软件，然后进行配置后就可以使计算具备了提供某种服务的能力。</p>
</blockquote>
<p>常见的服务器软件有：</p>
<ol>
<li>文件服务器：Server-U、FileZilla、VsFTP等（FTP是File Transfer Protocol文件传输协议）；</li>
<li>数据库服务器：oracle、mysql、SQL server、DB2、ACCESS等；</li>
<li>邮件服务器：Postfix、Sendmail等；</li>
<li><strong>HTTP服务器</strong>：Apache、Nginx、IIS、Tomcat、NodeJS等；</li>
</ol>
<h2 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h2><ol>
<li>按<strong>服务类型</strong>可分为：文件服务器、数据库服务器、邮件服务器、Web服务器等；</li>
<li>按<strong>操作系统</strong>可分为：Linux服务器、Windows服务器等；</li>
<li>按<strong>应用软件</strong>可分为 Apache服务器、Nginx 服务器、IIS服务器、Tomcat服务器、weblogic服务器、WebSphere服务器、boss服务器、 Node服务器等；</li>
</ol>
<h2 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h2><p>即网站服务器，主要提供文档(文本、图片、视频、音频)浏览服务，一般安装Apache、Nginx服务器软件。</p>
<p>HTTP服务器可以结合某一编程语言处理业务逻辑，由此进行的开发，通常称之为<strong>服务端开发</strong>。 </p>
<p>常见的运行在服务端的编程语言包括 php、java、.net、Python、Ruby、Perl等。  </p>
<h2 id="服务器总结"><a href="#服务器总结" class="headerlink" title="服务器总结"></a>服务器总结</h2><ol>
<li>服务器说白了就是计算机，通过安装了某些软件，就可以提供某些特定的服务器。</li>
<li>根据服务器软件的功能，名称，安装的系统这些不同的标准，可以对服务器划分成不同的类型。</li>
<li>HTTP服务器主要提供网站浏览服务，通常需要结合某种编程语言进行开发，我们通常称之为服务器开发。</li>
<li>专业的服务器与计算机的区别<ol>
<li>稳定性：服务器要求7*24不间断运行。</li>
<li>性能：服务器能够同时响应更多客户端的请求。</li>
<li>价格：服务器价格通常比普通计算机贵很多。</li>
</ol>
</li>
</ol>
<p><strong>台式服务器</strong></p>
<p><strong>机架服务器</strong></p>
<p><strong>机房</strong></p>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><blockquote>
<p>具有向服务器<strong>索取服务</strong>能力的终端，叫做客户端。</p>
</blockquote>
<ul>
<li>客户端：电脑、平板、手机安装了客户端软件，就可以称为客户端</li>
<li>客户端：安装客户端软件，<strong>索取服务</strong>的一方</li>
<li>服务器：安装服务器软件，<strong>提供服务</strong>的一方</li>
</ul>
<h2 id="客户端软件"><a href="#客户端软件" class="headerlink" title="客户端软件"></a>客户端软件</h2><p>浏览器===&gt;索取<strong>网站服务浏览</strong>的软件</p>
<p>迅雷===&gt;索取文件下载服务的软件</p>
<p>铁路12306====&gt;索取火车票订购服务</p>
<p>今日头条====&gt;索取新闻头条服务</p>
<p>对于前端工程师而言，主要接触到的客户端软件就是<strong>浏览器</strong>，当然也可能会涉及大一些app开发。</p>
<p>以浏览器为宿主环境，结合 HTML、CSS、Javascript等技术，而进行的一系列开发，通常称之为<strong>前端开发</strong>。</p>
<h2 id="服务器与客户端的关系"><a href="#服务器与客户端的关系" class="headerlink" title="服务器与客户端的关系"></a>服务器与客户端的关系</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. QQ聊天中服务器与客户端的交互过程</span></div><div class="line"><span class="comment">//2. QQ能够与微信进行聊天吗？为什么？</span></div></pre></td></tr></table></figure>
<h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><blockquote>
<p>软件架构可以分为BS架构与CS架构</p>
</blockquote>
<h2 id="CS架构"><a href="#CS架构" class="headerlink" title="CS架构"></a>CS架构</h2><p>Client/Server架构，即客户端/服务器架构。是大家所熟悉的软件体系结构。需要安装对应的客户端软件，才能获取响应的服务。</p>
<p>常见的CS架构：</p>
<p>​    QQ、LOL、微信等</p>
<p>特点：</p>
<ul>
<li>需要安装才是使用</li>
<li>性能高效，使用更加稳定和流畅</li>
<li>开发和维护难度更大。</li>
<li>需要更新</li>
<li>需要兼容操作系统。</li>
</ul>
<h2 id="BS架构"><a href="#BS架构" class="headerlink" title="BS架构"></a>BS架构</h2><p>Broswer/Server架构，即浏览器/服务器架构。随着Internet的兴起，对CS结构的一种变化的结构。用户只需要安装浏览器即可。</p>
<ul>
<li>不需要安装，只需要浏览器即可。</li>
<li>相比CS架构，性能相对较差，没有那么流畅和稳定。</li>
<li>开发维护方便。</li>
<li>不需要更新</li>
<li>不用兼容操作系统。但是需要兼容浏览器。</li>
</ul>
<h1 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//思考：我写的代码，放到服务器后，同学们是如何访问到我的页面的？</span></div></pre></td></tr></table></figure>
<h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>所谓IP地址就是给每个连接在互联网上的主机分配的一个32位地址。(就像每部手机能正常通话需要一个号码一样)</p>
<p>通过ip就可以找到具体的某一台计算机。</p>
<p>例 <code>192.168.1.110</code></p>
<p>查看本机IP地址 <code>ping</code>、<code>ipconfig</code>、<code>ifconfig</code>（linux）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping <span class="number">192.168</span><span class="number">.1</span><span class="number">.110</span>  <span class="comment">//查看和某个同学的电脑是否连通</span></div></pre></td></tr></table></figure>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>由于IP地址基于数字，不方便记忆，于是便用域名来代替IP地址，域名是一个IP地址的“面具”</p>
<p>查看域名对应的IP地址 <code>ping</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping jd.com  <span class="comment">//可以获取到京东的ip</span></div></pre></td></tr></table></figure>
<h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><p>DNS（Domain Name System）因特网上作为域名和IP地址相互映射的一个分布式数据库， 能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</p>
<p>简单的说就是记录IP地址和域名之间对应关系的服务。</p>
<p>查找优先级 本机hosts文件、DNS服务器</p>
<p>ipconfig /flushdns 刷新DNS</p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口号是计算机与外界通讯交流的出口，每个端口对应不同的服务。</p>
<p>现实生活中，银行不同的窗口办理不同的业务。</p>
<p>查看端口占用情况 netstat -an</p>
<p>常见端口号 80、8080、3306、21、22</p>
<h2 id="本地hosts"><a href="#本地hosts" class="headerlink" title="本地hosts"></a>本地hosts</h2><blockquote>
<p>Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会<strong>首先自动从Hosts文件中寻找对应的IP地址</strong>，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hosts文件的地址：C:\Windows\System32\drivers\etc</span></div><div class="line"><span class="comment">//在浏览器中输入taobao.com的执行过程。</span></div></pre></td></tr></table></figure>
<h1 id="搭建HTTP服务器"><a href="#搭建HTTP服务器" class="headerlink" title="搭建HTTP服务器"></a>搭建HTTP服务器</h1><h2 id="phpStudy介绍"><a href="#phpStudy介绍" class="headerlink" title="phpStudy介绍"></a>phpStudy介绍</h2><blockquote>
<p>phpStudy是一个PHP调试环境的程序集成包。<br>该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin,安装非常的简单</p>
</blockquote>
<h2 id="phpStudy的安装"><a href="#phpStudy的安装" class="headerlink" title="phpStudy的安装"></a>phpStudy的安装</h2><p>安装phpStudy，解压双击安装(<strong>非中文路径</strong>)，其它默认安装。</p>
<p><strong>推荐就安装在默认的目录下，一定不能有中文，否则肯定启动不起来。</strong></p>
<h2 id="phpStudy的错误解决"><a href="#phpStudy的错误解决" class="headerlink" title="phpStudy的错误解决"></a>phpStudy的错误解决</h2><p>如果phpStudy启动发生错误，参数下列几点。</p>
<h3 id="关闭iis服务器"><a href="#关闭iis服务器" class="headerlink" title="关闭iis服务器"></a>关闭iis服务器</h3><p>如果发现服务器启动不成功，很大原因是端口被占用了，因为windows默认会有一个iis服务器，只需要把iis服务器给禁用了即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控制面板--&gt;程序--&gt;程序与功能--&gt;启用或关闭windows功能</span></div></pre></td></tr></table></figure>
<h3 id="提示缺少vc9-库文件"><a href="#提示缺少vc9-库文件" class="headerlink" title="提示缺少vc9 库文件"></a>提示缺少vc9 库文件</h3><p>在提供的ajax资料库中找到<strong>phpStudy运行库</strong>， 根据自己电脑操作系统的位数安装对应的vc9运行库即可。</p>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>如果希望系统自己的服务器能够被别人访问。需要关闭防火墙。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控制面板---&gt;系统和安全---&gt;Windows 防火墙---&gt;启动或者关闭windows防火墙</span></div></pre></td></tr></table></figure>
<h2 id="phpStudy的配置"><a href="#phpStudy的配置" class="headerlink" title="phpStudy的配置"></a>phpStudy的配置</h2><h3 id="修改网站目录与默认首页"><a href="#修改网站目录与默认首页" class="headerlink" title="修改网站目录与默认首页"></a>修改网站目录与默认首页</h3><ul>
<li>默认首页一般不用修改，业界规范就是index.html作为默认的首页。</li>
<li>修改网站目录时，网站目录一定不能中文，不然apache启动会失败。</li>
</ul>
<h3 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h3><p>在一台web服务器上，我们可以通过配置虚拟主机，然后分别设定根目录，实现对多个网站的管理。</p>
<p>具体步骤如下：</p>
<p><strong>1.找到http.conf文件</strong></p>
<p>找到470行，去掉<code>#</code>号注释</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Virtual hosts</div><div class="line">Include conf/extra/httpd-vhosts.conf</div></pre></td></tr></table></figure>
<p><strong>2.找到<code>httpd-vhosts.conf</code>文件</strong></p>
<p>在目录：D:\phpStudy\Apache\conf\extra下找到httpd-vhosts.conf文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"># 默认的虚拟主机</div><div class="line">&lt;VirtualHost _default_:<span class="number">80</span>&gt;</div><div class="line">  DocumentRoot <span class="string">"C:\www\study"</span></div><div class="line">  &lt;Directory <span class="string">"C:\www\study"</span>&gt;</div><div class="line">    Options +Indexes +FollowSymLinks +ExecCGI</div><div class="line">    AllowOverride All</div><div class="line">    Order allow,deny</div><div class="line">    Allow <span class="keyword">from</span> all</div><div class="line">    Require all granted</div><div class="line">  &lt;<span class="regexp">/Directory&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>VirtualHost&gt;</div><div class="line"></div><div class="line"># Add any other Virtual Hosts below</div><div class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</div><div class="line">    ServerAdmin webmaster@dummy-host.example.com</div><div class="line">    #根目录</div><div class="line">    DocumentRoot <span class="string">"C:\www\show"</span></div><div class="line">    #域名</div><div class="line">    ServerName show.com</div><div class="line">    #完整域名</div><div class="line">    ServerAlias www.show.com</div><div class="line">    ErrorLog <span class="string">"logs/dummy-host.example.com-error.log"</span></div><div class="line">    CustomLog <span class="string">"logs/dummy-host.example.com-access.log"</span> common</div><div class="line">&lt;<span class="regexp">/VirtualHost&gt;</span></div><div class="line"><span class="regexp">    </span></div><div class="line"><span class="regexp">&lt;VirtualHost *:80&gt;</span></div><div class="line"><span class="regexp">    ServerAdmin webmaster@dummy-host.example.com</span></div><div class="line"><span class="regexp">    #根目录</span></div><div class="line"><span class="regexp">    DocumentRoot "C:\www\api"</span></div><div class="line"><span class="regexp">    #域名</span></div><div class="line"><span class="regexp">    ServerName api.com</span></div><div class="line"><span class="regexp">    #完整域名</span></div><div class="line"><span class="regexp">    ServerAlias www.api.com</span></div><div class="line"><span class="regexp">    ErrorLog "logs/</span>dummy-host.example.com-error.log<span class="string">"</span></div><div class="line"><span class="string">    CustomLog "</span>logs/dummy-host.example.com-access.log<span class="string">" common</span></div><div class="line"><span class="string">&lt;/VirtualHost&gt;</span></div><div class="line"><span class="string">&lt;VirtualHost *:80&gt;</span></div><div class="line"><span class="string">    ServerAdmin webmaster@dummy-host.example.com</span></div><div class="line"><span class="string">    #根目录</span></div><div class="line"><span class="string">    DocumentRoot "</span>C:\www\study<span class="string">"</span></div><div class="line"><span class="string">    #域名</span></div><div class="line"><span class="string">    ServerName study.com</span></div><div class="line"><span class="string">    #完整域名</span></div><div class="line"><span class="string">    ServerAlias www.study.com</span></div><div class="line"><span class="string">    ErrorLog "</span>logs/dummy-host.example.com-error.log<span class="string">"</span></div><div class="line"><span class="string">    CustomLog "</span>logs/dummy-host.example.com-access.log<span class="string">" common</span></div><div class="line"><span class="string">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h1><blockquote>
<p>文件以.php后缀结尾，所有程序包含在<code>&lt;?php 这里是代码 ?&gt;</code><br>避免使用中文目录和中文文件名 </p>
<p>php页面无法直接打开需要运行在服务器环境当中</p>
</blockquote>
<p><strong><em>注意：学习php的目的是辅助学习ajax，因为我们需要了解一点后台的知识，千万不要本末倒置的跑去学习php语法。</em></strong> </p>
<h2 id="php初体验"><a href="#php初体验" class="headerlink" title="php初体验"></a>php初体验</h2><blockquote>
<p>webstorm对于php的支持并不友好，没有高亮显示，但是也支持代码提示，功能比较微弱，如果需要专业的提示和高亮，需要下载phpstorm。</p>
</blockquote>
<p><a href="http://www.jetbrains.com/phpstorm/" target="_blank" rel="external">phpstrorm下载地址</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  	<span class="comment">//echo 相当于document.write</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"hello world"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>输入中文乱码问题：如果使用echo输出中文，会乱码。</p>
<p><strong><em>在php的语法中，末尾必须加分号，不然就报错了（最后一行可以不加分号）</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="comment">//content-Type:text/html;返回内容是一个HTML文档，这样设置后，就能识别HTML标签了。</span></div><div class="line">    <span class="comment">//charset=utf-8 设置编码集</span></div><div class="line">    header(<span class="string">"content-Type:text/html;charset=utf-8"</span>);</div><div class="line">    <span class="keyword">echo</span> <span class="string">"hello world"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"大家好，我是胡聪聪"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//思考：浏览器访问html文件与访问php文件时，过程是怎么样的？</span></div></pre></td></tr></table></figure>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote>
<p>php是一门弱类型语法，变量的类型可以随意改变。<br>变量其实就是存储数据的容器</p>
</blockquote>
<p><strong>变量的命名规则</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 不需要关键字进行声明，变量在第一次赋值的时候被创建。</span></div><div class="line"><span class="comment">//2. 必须以$符号开始</span></div><div class="line"><span class="comment">//3. $后面的命名规则与js的变量命名规则一致。</span></div><div class="line">$name = <span class="string">"胡聪聪"</span>;</div><div class="line"><span class="keyword">echo</span> $name;</div></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p><strong>字符串</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$str = <span class="string">"胡聪聪"</span>;</div><div class="line"><span class="keyword">echo</span> $str;</div></pre></td></tr></table></figure>
<p><strong>整数</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$num = <span class="number">100</span>;</div><div class="line"><span class="keyword">echo</span> $num;</div></pre></td></tr></table></figure>
<p><strong>浮点型</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$float = <span class="number">11.11</span>;</div><div class="line"><span class="keyword">echo</span> $float;</div></pre></td></tr></table></figure>
<p><strong>布尔类型</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$flag = <span class="keyword">true</span>;</div><div class="line"><span class="comment">//当布尔类型值为true时，输出1</span></div><div class="line"><span class="keyword">echo</span> $flag;</div><div class="line">$flag = <span class="keyword">false</span>;</div><div class="line"><span class="comment">//当布尔类型为false时，输出空字符串</span></div><div class="line"><span class="keyword">echo</span> $flag;</div></pre></td></tr></table></figure>
<p><strong>php的拼串</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 在php中，+号只有算数的功能，并不能拼串</span></div><div class="line"><span class="comment">//2. 在php中，拼串使用.</span></div><div class="line">$name = <span class="string">"胡聪聪"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"大家好，我是"</span> . $name . <span class="string">"，今年18岁"</span>;</div></pre></td></tr></table></figure>
<p><strong>php中的单引号与双引号</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 字符串的定义可以使用单引号，也可以使用双引号</span></div><div class="line">$name = <span class="string">"胡聪聪"</span>;</div><div class="line">$desc = <span class="string">'很帅'</span>;</div><div class="line"><span class="comment">//2. 在单引号中，完全当做字符看待</span></div><div class="line"><span class="comment">//3. 在双引号中，能够识别变量。如果有变量格式的字符串，可以直接解析</span></div><div class="line"></div><div class="line">$name = <span class="string">"胡聪聪"</span>;<span class="comment">//胡聪聪</span></div><div class="line"><span class="keyword">echo</span> $name;</div><div class="line">$desc = <span class="string">'很帅'</span>;</div><div class="line"><span class="keyword">echo</span> $desc;<span class="comment">//很帅</span></div><div class="line"></div><div class="line">$str = <span class="string">'$name 很帅'</span>;<span class="comment">//$name 很帅</span></div><div class="line"><span class="keyword">echo</span> $str;</div><div class="line"></div><div class="line">$str = <span class="string">"$name 很帅"</span>;<span class="comment">//胡聪聪 很帅</span></div><div class="line"><span class="keyword">echo</span> $str;</div></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote>
<p>在php中，数组分为两种，索引数组和关联数组</p>
</blockquote>
<p><strong>索引数组（类似与JS中的数组）</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$arr = <span class="keyword">array</span>(<span class="string">"张飞"</span>,<span class="string">"赵云"</span>,<span class="string">"马超"</span>);</div><div class="line"><span class="keyword">echo</span> $arr;<span class="comment">//echo只能打印基本数据类型</span></div><div class="line"><span class="keyword">echo</span> $arr[<span class="number">0</span>];<span class="comment">//张飞</span></div></pre></td></tr></table></figure>
<p><strong>关联数组（类似与JS中的对象）</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//属性名必须用引号引起来</span></div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"zhangsan"</span>, <span class="string">"age"</span>=&gt;<span class="number">18</span>);</div><div class="line"><span class="keyword">echo</span> $arr[<span class="string">"name"</span>];</div></pre></td></tr></table></figure>
<p><strong>输出语句</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. echo 输出简单数据类型</span></div><div class="line"><span class="comment">//2. print_r 输出数据结构，一般用于输出复杂类型。</span></div><div class="line">print_r($arr);<span class="comment">//print_r是一个函数，不要忘记小括号</span></div><div class="line"><span class="comment">//3. var_dump 输出完整的数据结构，包括类型，一般用于精准调试</span></div><div class="line">var_dump($arr);</div></pre></td></tr></table></figure>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote>
<p>在php以及其他高级语言中，都有类的概念，表示一类对象，跟js中构造函数类似。</p>
</blockquote>
<p><strong>对象我们学习过程中用不到，了解即可。无需深究</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个类（类似js的构造函数）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> $name = <span class="string">"小明"</span>;</div><div class="line">  <span class="keyword">public</span> $age = <span class="number">12</span>;</div><div class="line">  <span class="keyword">private</span> $sex = <span class="string">"男"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$zs = <span class="keyword">new</span> Person;</div><div class="line">print_r($zs);<span class="comment">//打印对象的结构信息</span></div><div class="line"><span class="keyword">echo</span> $zs-&gt;name;<span class="comment">//对象中取值用 -&gt;</span></div><div class="line"><span class="keyword">echo</span> $zs-&gt;age;</div><div class="line"><span class="keyword">echo</span> $zs-&gt;sex;<span class="comment">//私有属性，无法获取</span></div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    header(<span class="string">"content-Type:text/html;charset=utf-8"</span>);</div><div class="line">    <span class="comment">//php中函数的语法与js中函数的语法基本一样，不同点在于</span></div><div class="line">    <span class="comment">//1. 函数名大小写不敏感</span></div><div class="line">    <span class="comment">//2. 函数的参数可以设置默认值</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> <span class="params">($name=<span class="string">"周杰伦"</span>)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"大家好，我是$name"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">    sayHello();<span class="comment">//不传参数，会使用默认值</span></div><div class="line">    sayHello(<span class="string">"胡聪聪"</span>);<span class="comment">//传参数，默认值不生效，和less差不多。</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><p>基本上来说，所有语言的if..else语法都是一样</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$age = <span class="number">17</span>;</div><div class="line"><span class="keyword">if</span> ($age &gt;= <span class="number">18</span>) &#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"终于可以看电影了,嘿嘿嘿"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"哎，还是回家学习把"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p><strong>遍历索引数组</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$arr = <span class="keyword">array</span>(<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"赵六"</span>, <span class="string">"田七"</span>, <span class="string">"王八"</span>);</div><div class="line"><span class="comment">//获取数组的长度： count($arr)</span></div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($arr); $i++) &#123;</div><div class="line">  <span class="keyword">echo</span> $arr[$i];</div><div class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>遍历关联数组</strong> </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//遍历关联数组</span></div><div class="line">$arr = <span class="keyword">array</span>(</div><div class="line">  <span class="string">"name"</span>=&gt;<span class="string">"zs"</span>,</div><div class="line">  <span class="string">"age"</span>=&gt;<span class="number">18</span>,</div><div class="line">  <span class="string">"sex"</span>=&gt;<span class="number">20</span></div><div class="line">);</div><div class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">  <span class="keyword">echo</span> $key . <span class="string">"="</span> . $value . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><blockquote>
<p>表单（form）：表单用于收集用户输入信息，并将数据提交给服务器。是一种常见的与服务端数据交互的一种方式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. action：指定表单的提交地址</span></div><div class="line"><span class="comment">//2. method:指定表单的提交方式，get/post，默认get</span></div><div class="line"><span class="comment">//3. input的数据想要提交到后台，必须指定name属性，后台通过name属性获取值</span></div><div class="line"><span class="comment">//4. 想要提交表单，不能使用input:button 必须使用input:submit</span></div></pre></td></tr></table></figure>
<p><strong>php获取表单数据</strong> </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span><span class="variable">$_GET</span>是系统提供的一个变量，是一个数组，里面存放了表单通过get方式提交的数据。</div><div class="line"><span class="regexp">//</span><span class="variable">$_POST</span>是系统提供的一个变量，是一个数组，里面存放了表单通过post方式提交的数据。</div></pre></td></tr></table></figure>
<p><strong>get与post的区别</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. get方式</span></div><div class="line">	<span class="comment">//1.1 数据会拼接在url地址的后面?username=hcc&amp;password=123456</span></div><div class="line">	<span class="comment">//1.2 地址栏有长度限制，因此get方式提交数据大小不会超过4k</span></div><div class="line"><span class="comment">//2. post方式</span></div><div class="line">	<span class="comment">//2.1 数据不会在url中显示，相比get方式，post更安全</span></div><div class="line">	<span class="comment">//2.2 提交的数据没有大小限制</span></div><div class="line"></div><div class="line"><span class="comment">//根据HTTP规范，GET用于信息获取，POST表示可能修改变服务器上的资源的请求</span></div></pre></td></tr></table></figure>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p><strong>html要求</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 文件上传的提交方式必须是post方式</div><div class="line"><span class="number">2.</span> 需要给form指定enctype=<span class="string">"multipart/form-data"</span></div><div class="line"><span class="number">3.</span> 指定name属性，后台才能获取到</div></pre></td></tr></table></figure>
<p><strong>php相关</strong></p>
<ul>
<li>文件上传时，<code>$_GET</code>与<code>$_POST</code>都无法获取到文件信息，通过<code>$_FILES</code>才能获取到，这是一个数组。</li>
<li>上传文件时，文件会临时保存在服务器上，如果文件最终没有保存，那么临时文件会被删除，保证服务器安全。</li>
<li><code>sleep(10)</code>可以让代码延迟10秒钟才执行。</li>
<li><code>move_uploaded_file($path, $newPath);</code>可以保存临时图片</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$path = $_FILES[<span class="string">'upload'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">$newPath = <span class="string">"./uploads/test.png"</span>;</div><div class="line"><span class="comment">//第一个参数：临时文件的路径</span></div><div class="line"><span class="comment">//第二个参数：保存的文件路径</span></div><div class="line">move_uploaded_file($path, $newPath);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src='./uploads/test.png'&gt;"</span>;</div></pre></td></tr></table></figure>
<h2 id="PHP常用函数"><a href="#PHP常用函数" class="headerlink" title="PHP常用函数"></a>PHP常用函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取数组的长度</span></div><div class="line">echo count($arr);</div><div class="line"><span class="comment">//判断数组是否包含某个key</span></div><div class="line">echo array_key_exists(<span class="string">"name"</span>, $arr);</div><div class="line"><span class="comment">//判断数组是否包含某个值</span></div><div class="line">echo in_array(<span class="string">"zs"</span>, $arr);</div></pre></td></tr></table></figure>
<h2 id="动态页面"><a href="#动态页面" class="headerlink" title="动态页面"></a>动态页面</h2><blockquote>
<p>静态页面：页面的内容和结构都是写死，不会变化的，是是实实在在存在与服务器上的一个html页面。</p>
<p>动态页面：页面的内容会根据数据库中的数据变化，存在与服务器端的是一个php或者jsp页面，用户访问时，会实时的进行改变。</p>
</blockquote>
<h3 id="使用php动态渲染页面"><a href="#使用php动态渲染页面" class="headerlink" title="使用php动态渲染页面"></a>使用php动态渲染页面</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">//这个属性是可以通过数据库进行获取的</span></div><div class="line">  $person = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"name"</span>=&gt;<span class="string">"胡聪聪"</span>,</div><div class="line">    <span class="string">"gender"</span>=&gt;<span class="string">"男1"</span>,</div><div class="line">    <span class="string">"hobby"</span>=&gt;<span class="string">"女1"</span></div><div class="line">  )</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;p&gt;姓名：&lt;span&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $person[<span class="string">'name'</span>];  <span class="meta">?&gt;</span>&lt;/span&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;性别：&lt;span&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $person[<span class="string">'gender'</span>]; <span class="meta">?&gt;</span>&lt;/span&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;爱好：&lt;span&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $person[<span class="string">'hobby'</span>] <span class="meta">?&gt;</span>&lt;/span&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>以前很长一段时间的开发模式就是这样的，前端工程师先把html页面写好，后端程序员把html页面后缀改成php页面，然后将数据渲染出来。</p>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><blockquote>
<p>include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。包含文件很有用，如果您需要在网站的多张页面上引用相同的 PHP、HTML 或文本的话。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$arr = <span class="keyword">array</span>(<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>);</div><div class="line"><span class="keyword">include</span> <span class="string">'04-render-for.html'</span>;</div></pre></td></tr></table></figure>
<p>【案例：京东分类页】</p>
<p>【案例：京东首页】</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们使用php动态渲染页面时，有很多比较麻烦的地方。</p>
<ul>
<li>在前端写好页面以后，需要后台进行修改，意味这后端程序员也需要懂前端的知识，其实渲染的工作应该交给前端来做。</li>
<li>前端没有写好页面的话，后端无法开始工作，需要等待前端的页面完成之后才能开始工作，拖延项目的进度。</li>
<li>这种渲染，属于同步渲染，页面加载速度比较慢，会影响后面的内容能够的渲染速度。</li>
</ul>
<p>【演示：同步渲染】</p>
<h1 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h1><blockquote>
<p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则<br>HTTP协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和服务器之间互相通信的规则，HTTP协议分为<strong>请求</strong> 和<strong>响应</strong> 两个部分组成。</p>
</blockquote>
<h2 id="请求与请求报文"><a href="#请求与请求报文" class="headerlink" title="请求与请求报文"></a>请求与请求报文</h2><p><strong>get请求的请求报文详解</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//--------------------------请求行--------------------------------</span></div><div class="line"><span class="comment">// GET  请求方式</span></div><div class="line"><span class="comment">// /day02/01.php?username=hucc&amp;password=123456    请求路径+参数（注意点）</span></div><div class="line"><span class="comment">// HTTP/1.1 HTTP的版本号</span></div><div class="line">GET /day02/<span class="number">01.</span>php?username=hucc&amp;password=<span class="number">123456</span> HTTP/<span class="number">1.1</span></div><div class="line"></div><div class="line"><span class="comment">//--------------------------请求头--------------------------------</span></div><div class="line"><span class="comment">// Host:主机地址</span></div><div class="line">Host: www.study.com</div><div class="line"><span class="comment">// HTTP1.1版本默认开启，建立过连接后，TCP连接不会断开，下次连接可以继续使用（底层，不用管）</span></div><div class="line">Connection: keep-alive</div><div class="line"><span class="comment">//chrome浏览器自己增加的，不用管</span></div><div class="line">Upgrade-Insecure-Requests: <span class="number">1</span></div><div class="line"><span class="comment">//浏览器的代理字符串（版本信息）</span></div><div class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">58.0</span><span class="number">.3029</span><span class="number">.96</span> Safari/<span class="number">537.36</span></div><div class="line"><span class="comment">//浏览器端可以接受的类型。</span></div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,<span class="string">`*/*`</span>;q=<span class="number">0.8</span></div><div class="line"><span class="comment">//从哪个页面发出的请求</span></div><div class="line">Referer: http:<span class="comment">//www.study.com/day02/01-login.html</span></div><div class="line"><span class="comment">//检查浏览器支持的压缩方式</span></div><div class="line">Accept-Encoding: gzip, deflate, sdch</div><div class="line"><span class="comment">//浏览器支持的语言，优先中文。</span></div><div class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,en;q=<span class="number">0.6</span></div><div class="line"></div><div class="line"><span class="comment">//----------------------------请求体-------------------------------------</span></div><div class="line"><span class="comment">//get请求没有请求体，但是参数会拼接到请求行中</span></div></pre></td></tr></table></figure>
<p><strong>POST请求的请求报文</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//-----------------------请求行---------------------------------------------</span></div><div class="line">POST /day02/<span class="number">01.</span>php HTTP/<span class="number">1.1</span></div><div class="line"></div><div class="line"><span class="comment">//-----------------------请求头--------------------------------------------</span></div><div class="line">Host: www.study.com</div><div class="line">Connection: keep-alive</div><div class="line"><span class="comment">//传递的参数的长度。</span></div><div class="line">Content-Length: <span class="number">29</span></div><div class="line">Cache-Control: max-age=<span class="number">0</span></div><div class="line">Origin: http:<span class="comment">//www.study.com</span></div><div class="line">Upgrade-Insecure-Requests: <span class="number">1</span></div><div class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">58.0</span><span class="number">.3029</span><span class="number">.96</span> Safari/<span class="number">537.36</span></div><div class="line"><span class="comment">//内容类型：表单数据，如果是post请求，必须指定这个属性。</span></div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,<span class="string">`*/*`</span>;q=<span class="number">0.8</span></div><div class="line">Referer: http:<span class="comment">//www.study.com/day02/01-login.html</span></div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,en;q=<span class="number">0.6</span></div><div class="line"></div><div class="line"><span class="comment">//------------------------请求体------------------------------------------</span></div><div class="line">username=hucc&amp;password=<span class="number">123456</span></div></pre></td></tr></table></figure>
<p><strong>GET请求与POST请求的对比</strong> </p>
<ul>
<li>GET请求没有请求体，因为GET请求的参数拼接到地址栏中了</li>
<li>POST请求有请求体，就是传递的参数</li>
<li>POST请求需要指定content-type属性。</li>
</ul>
<h2 id="响应与响应报文"><a href="#响应与响应报文" class="headerlink" title="响应与响应报文"></a>响应与响应报文</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//---------------------状态行（响应行）-------------------------------</span></div><div class="line"><span class="comment">//HTTP/1.1  HTTP版本</span></div><div class="line"><span class="comment">//200 响应的状态</span></div><div class="line">	<span class="comment">//200表示成功</span></div><div class="line">	<span class="comment">//304表示读缓存</span></div><div class="line">	<span class="comment">//404表示找不到资源</span></div><div class="line">	<span class="comment">//500表示服务端错误</span></div><div class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</div><div class="line"></div><div class="line"><span class="comment">//----------------------响应头-----------------------------------------------</span></div><div class="line"><span class="built_in">Date</span>: Thu, <span class="number">22</span> Jun <span class="number">2017</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">22</span> GMT</div><div class="line">Server: Apache/<span class="number">2.4</span><span class="number">.23</span> (Win32) OpenSSL/<span class="number">1.0</span><span class="number">.2</span>j PHP/<span class="number">5.4</span><span class="number">.45</span></div><div class="line">X-Powered-By: PHP/<span class="number">5.4</span><span class="number">.45</span></div><div class="line">Content-Length: <span class="number">18</span></div><div class="line">Keep-Alive: timeout=<span class="number">5</span>, max=<span class="number">100</span></div><div class="line">Connection: Keep-Alive</div><div class="line"><span class="comment">//内容类型，告诉浏览器该如何解析响应结果</span></div><div class="line">Content-Type: text/html;charset=utf<span class="number">-8</span></div><div class="line"><span class="comment">//-----------------------响应体------------------------------------------------</span></div><div class="line">用户登录成功</div></pre></td></tr></table></figure>
<p>通常来说，我们不会用抓包工具来查看请求和响应，太麻烦了，可以直接使用谷歌浏览器来查看请求报文和响应报文。</p>
<p>谷歌浏览器会对报文进行一定的格式化，看起来虽然不是原生的报文，但是使用起来更加的方便简洁。</p>
<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><blockquote>
<p>即 Asynchronous [e’sɪŋkrənəs] Javascript And XML， AJAX 不是一门的新的语言，而是对现有技术的综合利用。 本质是在HTTP协议的基础上以异步的方式与服务器进行通信。</p>
</blockquote>
<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>同步和异步概念：</p>
<p>同步: 指的就是事情要一件一件做。等做完前一件才能做后一件任务</p>
<p>异步: 不受当前任务的影响，两件事情同时进行，做一件事情时，不影响另一件事情的进行。</p>
<p>编程中：异步程序代码执行时不会阻塞其它程序代码执行,从而提升整体执行效率。</p>
<p>网页异步应用：</p>
<ol>
<li>验证你的用户名是否已经存在（一边输入，一边获取你的信息，和后台比对）。</li>
<li>百度搜索提示，及相关内容展示（一边输入，一边找出了你可能要的内容）。</li>
<li>新浪微博评论（异步加载）。</li>
</ol>
<p>XMLHttpRequest可以以异步方式的处理程序。</p>
<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><blockquote>
<p>浏览器内建对象，用于在后台与服务器通信(交换数据) ， 由此我们便可实现对网页的部分更新，而不是刷新整个页面。这个请求是异步，即在往服务器发送请求时，并不会阻碍程序的运行，浏览器会继续渲染后续的结构。</p>
</blockquote>
<h3 id="发送get请求"><a href="#发送get请求" class="headerlink" title="发送get请求"></a>发送get请求</h3><p>XMLHttpRequest以异步的方式发送HTTP请求，因此在发送请求时，一样需要遵循HTTP协议。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用XMLHttpRequest发送get请求的步骤</span></div><div class="line"><span class="comment">//1. 创建一个XMLHttpRequest对象</span></div><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;<span class="comment">//构造函数没有参数的情况,括号可以省略</span></div><div class="line"><span class="comment">//2. 设置请求行</span></div><div class="line"><span class="comment">//第一个参数:请求方式  get/post</span></div><div class="line"><span class="comment">//第二个参数:请求的地址 需要在url后面拼上参数列表</span></div><div class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"08.php?name=hucc"</span>);</div><div class="line"><span class="comment">//3. 设置请求头</span></div><div class="line"><span class="comment">//浏览器会给我们默认添加基本的请求头,get请求时无需设置</span></div><div class="line"><span class="comment">//4. 设置请求体</span></div><div class="line"><span class="comment">//get请求的请求体为空,因为参数列表拼接到url后面了</span></div><div class="line">xhr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<ul>
<li>get请求,设置请求行时,需要把参数列表拼接到url后面</li>
<li>get请求不用设置请求头</li>
<li>get请求的请求体为null</li>
</ul>
<h3 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</div><div class="line"><span class="comment">//1. 设置请求行 post请求的参数列表在请求体中</span></div><div class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"09.php"</span>);</div><div class="line"><span class="comment">//2. 设置请求头, post请求必须设置content-type,不然后端无法获取到数据</span></div><div class="line">xhr.setRequestHeader(<span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line"><span class="comment">//3. 设置请求体</span></div><div class="line">xhr.send(<span class="string">"name=hucc&amp;age=18"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>post请求,设置请求行时,参数列表不能拼接到url后面</p>
</li>
<li><p>post必须设置请求头中的content-type为application/x-www-form-urlencoded</p>
</li>
<li><p>post请求需要将参数列表设置到请求体中.</p>
</li>
</ul>
<h3 id="获取响应"><a href="#获取响应" class="headerlink" title="获取响应"></a>获取响应</h3><p>HTTP响应分为3个部分，状态行、响应头、响应体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给xhr注册一个onreadystatechange事件，当xhr的状态发生状态发生改变时，会触发这个事件。</span></div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">    <span class="comment">//1. 获取状态行</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"状态行:"</span>+xhr.status);</div><div class="line">    <span class="comment">//2. 获取响应头</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"所有的相应头:"</span>+xhr.getAllResponseHeaders());</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"指定相应头:"</span>+xhr.getResponseHeader(<span class="string">"content-type"</span>));</div><div class="line">    <span class="comment">//3. 获取响应体</span></div><div class="line">    <span class="built_in">console</span>.log(xhr.responseText);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>readyState</strong> </p>
<blockquote>
<p>readyState:记录了XMLHttpRequest对象的当前状态</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//0：请求未初始化（还没有调用 open()）。</span></div><div class="line"><span class="comment">//1：请求已经建立，但是还没有发送（还没有调用 send()）。</span></div><div class="line"><span class="comment">//2：请求已发送，正在处理中</span></div><div class="line"><span class="comment">//3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</span></div><div class="line"><span class="comment">//4：响应已完成；您可以获取并使用服务器的响应了。(我们只需要关注状态4即可)</span></div></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>【判断用户名是否存在】</p>
<p>【用户登录案例】</p>
<p>【聊天机器人案例】</p>
<h2 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h2><blockquote>
<p>浏览器端只是负责用户的交互和数据的收集以及展示，真正的数据都是存储在服务器端的。我们现在通过ajax的确可以返回一些简单的数据（一个字符串），但是在实际开发过程中，肯定会会设计到大量的复杂类型的数据传输，比如数组、对象等，但是每个编程语言的语法都不一样。因此我们会采用通过的数据交换格式（XML、JSON）来进行数据的交互。</p>
</blockquote>
<h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p><strong>什么是XML</strong></p>
<ul>
<li>XML 指可扩展标记语言（EXtensible Markup Language）</li>
<li>XML 是一种标记语言，很类似 HTML</li>
<li>XML 的设计宗旨是传输数据，而非显示数据</li>
<li>XML 标签没有被预定义。您需要自行定义标签。</li>
</ul>
<p><strong>语法规范</strong></p>
<ul>
<li>第一行必须是版本信息</li>
<li>必须有一个根元素（有且仅有一个）</li>
<li>标签不可有空格、不可以数字或.开头、大小写敏感</li>
<li>不可交叉嵌套，都是双标签，如果是单标签，必须闭合</li>
<li>属性双引号（浏览器自动修正成双引号了）</li>
<li>特殊符号要使用实体</li>
<li>注释和HTML一样</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">desc</span>&gt;</span>路人甲<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">desc</span>&gt;</span>路人乙<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>php获取xml文件的内容</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意，如果需要返回xml数据，需要把content-type改成text/xml,不然浏览器以text/html进行解析。</span></div><div class="line">header(<span class="string">'content-type:text/xml;charset=utf-8'</span>);</div><div class="line"><span class="comment">//用于获取文件的内容</span></div><div class="line"><span class="comment">//参数：文件的路径</span></div><div class="line">$result = file_get_contents(<span class="string">"data.xml"</span>);</div><div class="line"><span class="keyword">echo</span> $result;</div></pre></td></tr></table></figure>
<p><strong>html解析xml</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取服务端返回的xml数据，需要使用xhr.responseXML，这是一个document对象，可以使用DOM中的方法查找元素。</span></div><div class="line"><span class="keyword">var</span> data = xhr.responseXML;</div><div class="line"><span class="comment">//获取所有的学生</span></div><div class="line"><span class="keyword">var</span> students = data.querySelectorAll(<span class="string">"student"</span>);</div></pre></td></tr></table></figure>
<p>缺点：虽然可以描述和传输复杂数据，但是其解析过于复杂并且体积较大，所以实现开发已经很少使用了。</p>
<h3 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h3><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript 规范的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。</p>
<ul>
<li>数据在名称/值对中</li>
<li>数据由逗号分隔(最后一个健/值对不能带逗号)</li>
<li>花括号保存对象，方括号保存数组</li>
<li>键使用双引号</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">'Hello'</span>, <span class="attr">b</span>: <span class="string">'World'</span>&#125;; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></div><div class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"a": "Hello", "b": "World"&#125;'</span>; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></div></pre></td></tr></table></figure>
<p><strong>JSON数据在不同语言进行传输时，类型为字符串，不同的语言各自也都对应有解析方法，需要解析完成后才能读取</strong></p>
<h4 id="php处理json"><a href="#php处理json" class="headerlink" title="php处理json"></a>php处理json</h4><ul>
<li>php关联数组==&gt; json</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// php的关联数组</span></div><div class="line">$obj = <span class="keyword">array</span>(</div><div class="line">  <span class="string">"a"</span>=&gt;<span class="string">"hello"</span>,</div><div class="line">  <span class="string">"b"</span>=&gt;<span class="string">"world"</span>,</div><div class="line">  <span class="string">"name"</span>=&gt;<span class="string">"胡聪聪"</span></div><div class="line">);</div><div class="line"><span class="comment">//json字符串</span></div><div class="line">$json = json_encode($obj);</div><div class="line"><span class="keyword">echo</span> $json;</div></pre></td></tr></table></figure>
<ul>
<li>json===&gt;php对象</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$json = <span class="string">'&#123;"a": "Hello", "b": "World"&#125;'</span>;<span class="comment">//json字符串</span></div><div class="line"><span class="comment">//第一个参数：json字符串</span></div><div class="line"><span class="comment">//第二个参数：</span></div><div class="line">	<span class="comment">//false，将json转换成对象(默认)</span></div><div class="line">	<span class="comment">//true：将对象转换成数组(推荐)</span></div><div class="line">$obj = json_decode($json,<span class="keyword">true</span>);</div><div class="line"><span class="keyword">echo</span> $obj[<span class="string">'a'</span>];</div><div class="line"></div><div class="line"><span class="comment">//通过json文件获取到的内容就是一个json字符串。</span></div><div class="line">$data = file_get_contents(<span class="string">"data.json"</span>);</div><div class="line"><span class="comment">//将json转换成数组</span></div><div class="line">$result = json_decode($data, <span class="keyword">true</span>);</div><div class="line">print_r($result);</div></pre></td></tr></table></figure>
<h4 id="JS处理json"><a href="#JS处理json" class="headerlink" title="JS处理json"></a>JS处理json</h4><ul>
<li><p>JS对象 ==&gt; JSON字符串 JSON.stringify(obj)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//obj是一个js对象</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">'Hello'</span>, <span class="attr">b</span>: <span class="string">'World'</span>&#125;</div><div class="line"><span class="comment">//result就变成了一个json字符串了</span></div><div class="line"><span class="keyword">var</span> result = <span class="built_in">JSON</span>.stringify(obj);<span class="comment">// '&#123;"a": "Hello", "b": "World"&#125;'</span></div></pre></td></tr></table></figure>
</li>
<li><p>JSON字符串 ==&gt; JS对象  JSON.parse(obj)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//json是一个json字符串</span></div><div class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"a": "Hello", "b": "World"&#125;'</span>;</div><div class="line"><span class="comment">//obj就变成了一个js对象</span></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(json);<span class="comment">// &#123;a: 'Hello', b: 'World'&#125;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用json进行数据传输</p>
<p>思考：</p>
<ol>
<li>js有一个对象，如何发送到php后台</li>
<li>php中有一个对象，如何发送到前台。</li>
</ol>
<p>【案例：获取表格数据.html】</p>
<h3 id="eval方法"><a href="#eval方法" class="headerlink" title="eval方法"></a>eval方法</h3><p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。eval的参数是一个字符串，这个字符串是需要执行的表达式或者语句。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">"&#123;&#125;"</span>));<span class="comment">//undefined，因为&#123;&#125;备当成了代码块</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">"(&#123;&#125;)"</span>));<span class="comment">//obj，因为&#123;&#125;用()引起来了。</span></div><div class="line"></div><div class="line"><span class="comment">//使用这个方法，也可以将一个json字符串转换成js对象。</span></div><div class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"name":"zs", "age":18, "sex":"男"&#125;'</span>;</div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">"("</span> + json + <span class="string">")"</span>);</div><div class="line"><span class="built_in">console</span>.log(obj);</div></pre></td></tr></table></figure>
<p>注意：eval函数的功能非常的强大，但是实际使用的情况并不多。</p>
<ul>
<li>eval形式的代码难以阅读</li>
<li>eval形式的代码无法打断点，因为本质还是还是一个字符串</li>
<li>在浏览器端执行任意的 JavaScript会带来潜在的安全风险，恶意的JavaScript代码可能会破坏应用</li>
</ul>
<h2 id="兼容性处理"><a href="#兼容性处理" class="headerlink" title="兼容性处理"></a>兼容性处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line"><span class="keyword">if</span>(XMLHttpRequest)&#123;</div><div class="line">  <span class="comment">//现代浏览器</span></div><div class="line">  xhr = <span class="keyword">new</span>  XMLHttpRequest();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="comment">//IE5.5支持</span></div><div class="line">  xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="封装ajax工具函数"><a href="#封装ajax工具函数" class="headerlink" title="封装ajax工具函数"></a>封装ajax工具函数</h2><blockquote>
<p>每次发送ajax请求，其实步骤都是一样的，重复了大量代码，我们完全可以封装成一个工具函数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 创建xhr对象</span></div><div class="line"><span class="comment">//2. 设置请求行</span></div><div class="line"><span class="comment">//3. 设置请求头</span></div><div class="line"><span class="comment">//3. 设置请求体</span></div><div class="line"><span class="comment">//4. 监听响应状态</span></div><div class="line"><span class="comment">//5. 获取响应内容</span></div></pre></td></tr></table></figure>
<h3 id="参数提取"><a href="#参数提取" class="headerlink" title="参数提取"></a>参数提取</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>参数类型</th>
<th>描述</th>
<th>传值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>string</td>
<td>请求方式</td>
<td>get/post</td>
<td>只要不传post，就是get</td>
</tr>
<tr>
<td>url</td>
<td>string</td>
<td>请求地址</td>
<td>接口地址</td>
<td>如果不传地址，不发送请求</td>
</tr>
<tr>
<td>async</td>
<td>boolean</td>
<td>是否异步</td>
<td>true/fase</td>
<td>只要不传false，那就是true，异步请求</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>请求数据</td>
<td><code>{key:value,key1:value2}</code></td>
<td>需要把这个对象拼接成参数的格式 uname=hucc&amp;upass=12345</td>
</tr>
<tr>
<td>dataType</td>
<td>string</td>
<td>返回的数据类型</td>
<td>xml/json/text</td>
<td>text</td>
</tr>
<tr>
<td>success</td>
<td>function</td>
<td>响应成功时调用</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>error</td>
<td>function</td>
<td>响应失败时调用</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3 id="参数检测"><a href="#参数检测" class="headerlink" title="参数检测"></a>参数检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//要求参数obj必须传递，否则直接不发送请求</span></div><div class="line"><span class="keyword">if</span>(!obj || <span class="keyword">typeof</span> obj !== <span class="string">"object"</span>)&#123;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//如果type传递的是post，那就发送post请求，否则发送get请求</span></div><div class="line"><span class="keyword">var</span> type = obj.type == <span class="string">"post"</span>?<span class="string">"post"</span>:<span class="string">'get'</span>;</div><div class="line"><span class="keyword">var</span> url = obj.url;</div><div class="line"><span class="keyword">if</span>(!url)&#123;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//只有当async传递了false，才会发送同步请求，不然只发送异步请求</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">async</span> = obj.async == <span class="literal">false</span>? <span class="literal">false</span>:<span class="literal">true</span>;</div></pre></td></tr></table></figure>
<h3 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = &#123;</div><div class="line">  ajax: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="comment">//如果options参数没有传递，直接返回。</span></div><div class="line">    <span class="keyword">if</span> (!options || <span class="keyword">typeof</span> options !== <span class="string">"object"</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//处理默认参数</span></div><div class="line">    <span class="comment">//如果参数不是post，那就默认为get</span></div><div class="line">    <span class="keyword">var</span> type = options.type == <span class="string">"post"</span> ? <span class="string">"post"</span> : <span class="string">"get"</span>;</div><div class="line">    <span class="comment">//如果没有传url，那就传当前地址</span></div><div class="line">    <span class="keyword">var</span> url = options.url || location.pathname;</div><div class="line">    <span class="comment">//如果参数不是false，那就默认是true，发异步请求</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">async</span> = options.async == <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> params = <span class="keyword">this</span>.getParams(options.data);</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    </div><div class="line">    <span class="comment">//设置请求行</span></div><div class="line">    <span class="keyword">if</span> (type == <span class="string">"get"</span>) &#123;</div><div class="line">      url = url + <span class="string">"?"</span> + params;</div><div class="line">    &#125;</div><div class="line">    xhr.open(type, url, <span class="keyword">async</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//设置请求头</span></div><div class="line">    <span class="keyword">if</span> (type == <span class="string">"post"</span>) &#123;</div><div class="line">      xhr.setRequestHeader(<span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置请求参数</span></div><div class="line">    xhr.send(params);</div><div class="line">    </div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</div><div class="line">          <span class="comment">/*根据响应头的content-type属性指定方法接收到的内容*/</span></div><div class="line">          <span class="keyword">var</span> contentType = xhr.getResponseHeader(<span class="string">'content-type'</span>);</div><div class="line">          <span class="keyword">var</span> data = <span class="literal">null</span>;</div><div class="line">          <span class="keyword">if</span> (contentType.indexOf(<span class="string">'json'</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">            data = <span class="built_in">JSON</span>.parse(xhr.responseText);</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType.indexOf(<span class="string">'xml'</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">            data = xhr.responseXML;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            data = xhr.responseText;</div><div class="line">          &#125;</div><div class="line">          <span class="comment">/*执行成功函数*/</span></div><div class="line">          options.success &amp;&amp; options.success(data);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          options.error &amp;&amp; options.error(xhr.responseText);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  getParams: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="comment">//将obj对象转换成参数</span></div><div class="line">    <span class="comment">//将对象转换成参数列表</span></div><div class="line">    <span class="keyword">if</span> (!obj) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</div><div class="line">      arr.push(k + <span class="string">"="</span> + obj[k]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr.join(<span class="string">"&amp;"</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>【登录案例】</p>
<h2 id="jQuery中的ajax方法"><a href="#jQuery中的ajax方法" class="headerlink" title="jQuery中的ajax方法"></a>jQuery中的ajax方法</h2><blockquote>
<p>jQuery为我们提供了更强大的Ajax封装</p>
</blockquote>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h3><p>参数列表</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>描述</th>
<th>取值</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>接口地址</td>
<td></td>
<td>url:”02.php”</td>
</tr>
<tr>
<td>type</td>
<td>请求方式</td>
<td>get/post</td>
<td>type:”get”</td>
</tr>
<tr>
<td>timeout</td>
<td>超时时间</td>
<td>单位毫秒</td>
<td>timeout:5000</td>
</tr>
<tr>
<td>dataType</td>
<td>服务器返回的格式</td>
<td>json/xml/text(默认)</td>
<td>dataType:”json”</td>
</tr>
<tr>
<td>data</td>
<td>发送的请求数据</td>
<td>对象</td>
<td>data:{name:”zs”, age:18}</td>
</tr>
<tr>
<td>beforeSend</td>
<td>调用前的回调函数</td>
<td>function(){}</td>
<td>beforeSend:function(){ alert(1) }</td>
</tr>
<tr>
<td>success</td>
<td>成功的回调函数</td>
<td>function (data) {}</td>
<td>success:function (data) {}</td>
</tr>
<tr>
<td>error</td>
<td>失败的回调函数</td>
<td>function (error) {}</td>
<td>error:function(data) {}</td>
</tr>
<tr>
<td>complete</td>
<td>完成后的回调函数</td>
<td>function () {}</td>
<td>complete:function () {}</td>
</tr>
</tbody>
</table>
<p>使用示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  type:<span class="string">"get"</span>,<span class="comment">//请求类型</span></div><div class="line">  url:<span class="string">"02.php"</span>,<span class="comment">//请求地址</span></div><div class="line">  data:&#123;<span class="attr">name</span>:<span class="string">"zs"</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="comment">//请求数据</span></div><div class="line">  dataType:<span class="string">"json"</span>,<span class="comment">//希望接受的数据类型</span></div><div class="line">  timeout:<span class="number">5000</span>,<span class="comment">//设置超时时间</span></div><div class="line">  beforeSend:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//alert("发送前调用");</span></div><div class="line">  &#125;,</div><div class="line">  success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">//alert("成功时调用");</span></div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">  &#125;,</div><div class="line">  error:<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="comment">//alert("失败时调用");</span></div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;,</div><div class="line">  complete:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//alert("请求完成时调用");</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>【案例：登录案例.html】</p>
<h3 id="其他api-了解"><a href="#其他api-了解" class="headerlink" title="其他api(了解)"></a>其他api(了解)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$.post(url, callback, [dataType]);只发送post请求</span></div><div class="line"><span class="comment">//$.get(url, callback, [dataType]);</span></div><div class="line"><span class="comment">//$.getJSON(url, callback);</span></div><div class="line"><span class="comment">//$.getScript(url,callback);//载入服务器端的js文件</span></div><div class="line"><span class="comment">//$("div").load(url);//载入一个服务器端的html页面。</span></div></pre></td></tr></table></figure>
<h3 id="接口化开发"><a href="#接口化开发" class="headerlink" title="接口化开发"></a>接口化开发</h3><p>请求地址即所谓的接口，通常我们所说的接口化开发，其实是指一个接口对应一个功能， 并且严格约束了<strong>请求参数</strong> 和<strong>响应结果</strong> 的格式，这样前后端在开发过程中，可以减少不必要的讨论， 从而并行开发，可以极大的提升开发效率，另外一个好处，当网站进行改版后，服务端接口进行调整时，并不影响到前端的功能。</p>
<h4 id="获取短信验证码接口"><a href="#获取短信验证码接口" class="headerlink" title="获取短信验证码接口"></a>获取短信验证码接口</h4><p><strong>需求文档(产品)</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//总需求：点击发送按钮，向服务端发送请求</span></div><div class="line"><span class="comment">//需求1：格式校验</span></div><div class="line">  <span class="comment">//1. 手机号码不能为空   如果为空提示"手机号不能为空"</span></div><div class="line">  <span class="comment">//2. 手机号码格式必须正确,     提示"请输入正确的手机号码"</span></div><div class="line"><span class="comment">//需求2：点击发送时，按钮显示为"发送中",并且不能重复提交请求</span></div><div class="line"><span class="comment">//需求3：根据不同的响应结果，进行响应。</span></div><div class="line">  <span class="comment">//1. 如果接口调用成功</span></div><div class="line">      <span class="comment">//如果响应代码为100，倒计时</span></div><div class="line">      <span class="comment">//如果响应代码为101，提示手机号重复</span></div><div class="line">  <span class="comment">//2. 如果接口调用失败，告诉用户"服务器繁忙，请稍候再试"</span></div></pre></td></tr></table></figure>
<p><strong>接口文档</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口说明：获取短信验证码</span></div><div class="line"><span class="comment">//接口地址：getCode.php</span></div><div class="line"><span class="comment">//请求方式：get</span></div><div class="line"><span class="comment">//接口传参：mobile 手机号</span></div><div class="line"><span class="comment">//返回类型  json</span></div><div class="line"><span class="comment">//接口返回：&#123;"code":"101","msg":"手机号码存在", "mobile":"18511249258"&#125;</span></div><div class="line">        <span class="comment">//code 当前业务逻辑的处理成功失败的标识  100:成功   101:手机号码存在</span></div><div class="line">        <span class="comment">//msg  当前系统返回给前端提示</span></div><div class="line">        <span class="comment">//mobile  当前的手机号码</span></div></pre></td></tr></table></figure>
<h4 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h4><p><strong>表单序列化</strong></p>
<p>jquery提供了一个<code>serialize()</code>方法序列化表单，说白就是将表单中带有name属性的所有参数拼成一个格式为<code>name=value&amp;name1=value1</code>这样的字符串。方便我们获取表单的数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//serialize将表单参数序列化成一个字符串。必须指定name属性</span></div><div class="line"><span class="comment">//name=hucc&amp;pass=123456&amp;repass=123456&amp;mobile=18511249258&amp;code=1234</span></div><div class="line">$(<span class="string">'form'</span>).serialize();</div><div class="line"></div><div class="line"><span class="comment">//serializeArray将表单序列化成一个数组，必须指定name属性</span></div><div class="line"><span class="comment">//[&#123;name:"name", value:"hucc"&#125;,&#123;name:"pass", value:"123456"&#125;,&#123;name:"repass", value:"123456"&#125;,&#123;name:"mobile", value:"18511241111"&#125;, &#123;name:"code", value:"1234"&#125;]</span></div><div class="line">$(<span class="string">'form'</span>).serializeArray();</div></pre></td></tr></table></figure>
<p><strong>jquery的ajax方法，data参数能够直接识别表单序列化的数据<code>data:$(&#39;form&#39;).serializeArray()</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.post(&#123;</div><div class="line">  url:<span class="string">"register.php"</span>,</div><div class="line">  data:$(<span class="string">'form'</span>).serializeArray(),</div><div class="line">  dataType:<span class="string">'json'</span>,</div><div class="line">  success:<span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(info);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>需求文档</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注册功能</span></div><div class="line"><span class="comment">//总需求：点击注册按钮，向服务端发送请求</span></div><div class="line"><span class="comment">//需求1:表单校验</span></div><div class="line">  <span class="comment">//1.1 用户名不能为空，否则提示"请输入用户名"</span></div><div class="line">  <span class="comment">//1.2 密码不能为空，否则提示"请输入密码"</span></div><div class="line">  <span class="comment">//1.3 确认密码必须与密码一直，否则提示"确认密码与密码不一致"</span></div><div class="line">  <span class="comment">//1.4 手机号码不能为空，否则提示"请输入手机号码";</span></div><div class="line">  <span class="comment">//1.5 手机号码格式必须正确，否则提示"手机号格式错误"</span></div><div class="line">  <span class="comment">//1.6 短信验证码必须是4位的数字，否则提示"验证码格式错误"</span></div><div class="line"><span class="comment">//需求2：点击注册按钮时，按钮显示为"注册中...",并且不能重复提交请求</span></div><div class="line"><span class="comment">//需求3：根据不同响应结果，处理响应</span></div><div class="line">  <span class="comment">//3.1 接口调用成功</span></div><div class="line">    <span class="comment">//100 提示用户注册成功，3s后跳转到首页</span></div><div class="line">    <span class="comment">//101 提示用户"用户名hucc已经存在"</span></div><div class="line">    <span class="comment">//102 提示用户"验证码错误"</span></div><div class="line">  <span class="comment">//3.1 接口调用失败，提示"服务器繁忙，请稍后再试",恢复按钮的值</span></div></pre></td></tr></table></figure>
<p><strong>接口文档</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口说明：注册</span></div><div class="line"><span class="comment">//接口地址：register.php</span></div><div class="line"><span class="comment">//请求方式：post</span></div><div class="line"><span class="comment">//接口传参：name:用户名 pass:密码 code:验证码  mobile:手机号</span></div><div class="line"><span class="comment">//返回类型  json</span></div><div class="line"><span class="comment">//接口返回：&#123;"code":"100","msg":"注册成功","name":"huccc"&#125;</span></div><div class="line">        <span class="comment">//code 当前业务逻辑的处理成功失败的标识  100:成功  101:用户存在 102:验证码错误</span></div><div class="line">        <span class="comment">//msg  当前系统返回给前端提示</span></div><div class="line">        <span class="comment">//name: 注册的用户名</span></div></pre></td></tr></table></figure>
<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><blockquote>
<p>是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。</p>
</blockquote>
<h2 id="为什么要使用模板引擎"><a href="#为什么要使用模板引擎" class="headerlink" title="为什么要使用模板引擎"></a>为什么要使用模板引擎</h2><p>我们通过ajax获取到数据后，需要把数据渲染到页面，在学习模板引擎前，我们的做法是大量的拼接字符串，对于结构简单的页面，这么做还行，但是如果页面结构很复杂，使用拼串的话<strong>代码可阅读性非常的差，而且非常容易出错，后期代码维护也是相当的麻烦。</strong> </p>
<p>【演示：使用拼串进行渲染的缺点.html】</p>
<h2 id="常见的模板引擎"><a href="#常见的模板引擎" class="headerlink" title="常见的模板引擎"></a>常见的模板引擎</h2><p>BaiduTemplate：<a href="http://tangram.baidu.com/BaiduTemplate/" target="_blank" rel="external">http://tangram.baidu.com/BaiduTemplate/</a><br>velocity.js：<a href="https://github.com/shepherdwind/velocity.js/" target="_blank" rel="external">https://github.com/shepherdwind/velocity.js/</a><br>ArtTemplate：<a href="https://github.com/aui/artTemplate" target="_blank" rel="external">https://github.com/aui/artTemplate</a></p>
<p>artTemplate是使用最广泛，效率最高的模板引擎，需要大家掌握。</p>
<h2 id="artTemplate的使用"><a href="#artTemplate的使用" class="headerlink" title="artTemplate的使用"></a>artTemplate的使用</h2><p><a href="https://github.com/aui/art-template" target="_blank" rel="external">github地址</a></p>
<p><a href="https://aui.github.io/art-template/docs/" target="_blank" rel="external">中文api地址</a></p>
<h3 id="artTemplate入门"><a href="#artTemplate入门" class="headerlink" title="artTemplate入门"></a>artTemplate入门</h3><p><strong>1.引入模板引擎的js文件</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"template-web.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><strong>2.准备模板</strong> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">  指定了type为text/html后，这一段script标签并不会解析，也不会显示。</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"myTmp"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：隔壁老王<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：18<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>技能：查水表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>描述：年轻力气壮<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>3.准备数据</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3. 准备数据,数据是后台获取的，可以随时变化</span></div><div class="line"><span class="keyword">var</span> json = &#123;</div><div class="line">  userName:<span class="string">"隔壁老王"</span>,</div><div class="line">  age:<span class="number">18</span>,</div><div class="line">  skill:<span class="string">"查水表"</span>,</div><div class="line">  desc:<span class="string">"年轻气壮"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4.将模板与数据进行绑定</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数：模板的id</span></div><div class="line"><span class="comment">//第二个参数：数据</span></div><div class="line"><span class="comment">//返回值：根据模板生成的字符串。</span></div><div class="line"><span class="keyword">var</span> html = template(<span class="string">"myTmp"</span>, json);</div><div class="line"><span class="built_in">console</span>.log(html);</div></pre></td></tr></table></figure>
<p><strong>5.修改模板</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"myTmp"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：</span><span class="template-variable">&#123;&#123;userName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;age&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>技能：</span><span class="template-variable">&#123;&#123;skill&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>描述：</span><span class="template-variable">&#123;&#123;desc&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>6.将数据显示到页面</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</div><div class="line">div.innerHTML = html;</div></pre></td></tr></table></figure>
<h3 id="artTemplate语法"><a href="#artTemplate语法" class="headerlink" title="artTemplate语法"></a>artTemplate语法</h3><p><strong>if语法</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;if gender='男'&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"man"</span>&gt;</span></div><div class="line">&#123;&#123;else&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"woman"</span>&gt;</span></div><div class="line">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure>
<p><strong>each语法</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">  1. &#123;&#123;each data&#125;&#125;  可以通过$value 和 $index获取值和下标</span></div><div class="line"><span class="comment">  2. &#123;&#123;each data v i&#125;&#125;  自己指定值为v，下标为i</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line">&#123;&#123;each data v i&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;v.url&#125;&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;v.src&#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;v.content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&#123;&#123;/each&#125;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果返回的数据是个数组，必须使用对象进行包裹，因为在&#123;&#123;&#125;&#125;中只写书写对象的属性。</span></div><div class="line"><span class="keyword">var</span> html = template(<span class="string">"navTmp"</span>, &#123;<span class="attr">data</span>:info&#125;);</div></pre></td></tr></table></figure>
<p>【案例：京东导航】</p>
<p>【案例：祝愿墙】</p>
<p>【案例：什么值得买】</p>
<h1 id="瀑布流案例"><a href="#瀑布流案例" class="headerlink" title="瀑布流案例"></a>瀑布流案例</h1><h2 id="封装jQuery瀑布流插件"><a href="#封装jQuery瀑布流插件" class="headerlink" title="封装jQuery瀑布流插件"></a>封装jQuery瀑布流插件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//特点分析：</span></div><div class="line"><span class="comment">//1. 跟以前将的瀑布流不一样的是，这次的瀑布流固定版心为1200px</span></div><div class="line"><span class="comment">//2. 瀑布流固定摆放5列，每一列的宽度固定为232px。</span></div><div class="line"></div><div class="line"><span class="comment">//思路分析：</span></div><div class="line"><span class="comment">//1. 计算每一列之间的缝隙</span></div><div class="line"><span class="comment">//2. 初始化一个数组，用户存储每一列的高度 [0,0,0,0,0]</span></div><div class="line"><span class="comment">//3. 查找数组的最小列，每次都把图片定位到最小列的位置</span></div><div class="line"><span class="comment">//4. 更新数组最小列的高度（加上定位过来的图片的高度）</span></div></pre></td></tr></table></figure>
<p>代码参考：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$.fn.waterfall = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $box = $(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">var</span> $item = $box.children();</div><div class="line">  <span class="keyword">var</span> boxWidth = $box.width();<span class="comment">//父盒子的宽度</span></div><div class="line">  <span class="keyword">var</span> itemWidth = <span class="number">232</span>;<span class="comment">//每个盒子固定宽度为232</span></div><div class="line">  <span class="keyword">var</span> columns = <span class="number">5</span>;<span class="comment">//固定摆放5列</span></div><div class="line">  <span class="keyword">var</span> gap = (boxWidth - columns * itemWidth) / (columns - <span class="number">1</span>);<span class="comment">//缝隙的宽度 10</span></div><div class="line">  <span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; <span class="comment">//初始化数组</span></div><div class="line">  $item.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//查找最小列</span></div><div class="line">    <span class="keyword">var</span> min = arr[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> minIndex = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (min &gt; arr[i]) &#123;</div><div class="line">        min = arr[i];</div><div class="line">        minIndex = i;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置位置</span></div><div class="line">    $(<span class="keyword">this</span>).css(&#123;</div><div class="line">      left: minIndex * (itemWidth + gap),</div><div class="line">      top: min</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//更新数组</span></div><div class="line">    arr[minIndex] = min + $(<span class="keyword">this</span>).outerHeight() + gap;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="瀑布流完整版"><a href="#瀑布流完整版" class="headerlink" title="瀑布流完整版"></a>瀑布流完整版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需求分析：</span></div><div class="line"><span class="comment">//1. 页面刚开始，没有任何一张图片。因此需要从通过ajax获取图片</span></div><div class="line"><span class="comment">//2. 使用模版引擎将获取到的数据渲染到页面</span></div><div class="line"><span class="comment">//3. 因为图片路径是从服务端获取的，加载需要时间，需要等待图片加载完成后才能使用瀑布流进行布局。</span></div><div class="line"><span class="comment">//4. 给window注册scroll事件，当触底时，需要动态的加载图片。</span></div><div class="line"><span class="comment">//5. 加载时，显示加载中的提示信息，并且要求不能重复发送ajax请求</span></div><div class="line"><span class="comment">//6. 当服务端返回图片数量为0时，提示用户没有更多数据。</span></div></pre></td></tr></table></figure>
<p>接口文档</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口说明：瀑布流分页数据</span></div><div class="line"><span class="comment">//接口地址：data.php</span></div><div class="line"><span class="comment">//请求方式：get</span></div><div class="line"><span class="comment">//接口参数：page 当前是第几页    pageSize 当前页需要显示多少条</span></div><div class="line"><span class="comment">//返回类型  json</span></div><div class="line"><span class="comment">//返回数据：</span></div><div class="line">&#123;</div><div class="line">  page: <span class="number">2</span>,</div><div class="line">  items:[</div><div class="line">    &#123;<span class="attr">path</span>: <span class="string">"./images/1.jpg"</span>,<span class="attr">text</span>:<span class="string">'这是描述信息'</span>&#125;,</div><div class="line">    &#123;<span class="attr">path</span>: <span class="string">"./images/2.jpg"</span>,<span class="attr">text</span>:<span class="string">'这是描述信息'</span>&#125;</div><div class="line">    &#123;<span class="attr">path</span>: <span class="string">"./images/2.jpg"</span>,<span class="attr">text</span>:<span class="string">'这是描述信息'</span>&#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line">	<span class="comment">//page   下一页的页码</span></div><div class="line">	<span class="comment">//items  返回当前页的数据</span></div><div class="line">		<span class="comment">//path 图片地址</span></div><div class="line">		<span class="comment">//text 文字</span></div></pre></td></tr></table></figure>
<h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><h2 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">1. phpstudy--&gt;MYSQL管理器--&gt;MySQL-Front--&gt;根据下图连接信息连接数据库</span></div><div class="line"><span class="comment">2. 选择test数据库，点击sql编辑器，根据下列sql语句，生成数据。</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span>,</div><div class="line">  <span class="string">`academy`</span> <span class="built_in">varchar</span>(<span class="number">400</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'前端与移动开发学院'</span>,</div><div class="line">  <span class="string">`introduce`</span> <span class="built_in">varchar</span>(<span class="number">1000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'暂无'</span>,</div><div class="line">  <span class="string">`createTime`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'张三01'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发学院'</span>, <span class="string">'暂无'</span>, <span class="string">'2017-05-26 16:39:40'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'张三02'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'张三03'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'张三04'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'张三05'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'张三06'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'张三07'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'张三08'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'9'</span>, <span class="string">'张三09'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'10'</span>, <span class="string">'张三09'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'11'</span>, <span class="string">'张三10'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'12'</span>, <span class="string">'张三11'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'13'</span>, <span class="string">'张三12'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'14'</span>, <span class="string">'张三13'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'15'</span>, <span class="string">'张三14'</span>, <span class="string">'男'</span>, <span class="string">'前端与移动开发'</span>, <span class="string">'哈哈哈'</span>, <span class="string">'2017-05-26 16:40:27'</span>);</div></pre></td></tr></table></figure>
<h2 id="页面初始化"><a href="#页面初始化" class="headerlink" title="页面初始化"></a>页面初始化</h2><ul>
<li>导航组件</li>
<li>panel组件</li>
<li>table组件</li>
<li>模态框组件</li>
<li>表单组件</li>
</ul>
<h2 id="bootstrap-paginator分页插件的使用"><a href="#bootstrap-paginator分页插件的使用" class="headerlink" title="bootstrap-paginator分页插件的使用"></a>bootstrap-paginator分页插件的使用</h2><blockquote>
<p>Bootstrap Paginator是一款基于Bootstrap的js分页插件，功能很丰富，</p>
</blockquote>
<p><a href="https://github.com/lyonlai/bootstrap-paginator" target="_blank" rel="external">github地址</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#pagintor"</span>).bootstrapPaginator(&#123;</div><div class="line">  bootstrapMajorVersion:<span class="number">3</span>,<span class="comment">//默认是2，如果是bootstrap3版本，这个参数必填</span></div><div class="line">  currentPage:<span class="number">1</span>,<span class="comment">//当前页</span></div><div class="line">  totalPages:<span class="number">10</span>,<span class="comment">//总页数</span></div><div class="line">  size:<span class="string">"small"</span>,<span class="comment">//设置控件的大小，mini, small, normal,large</span></div><div class="line">  onPageClicked:<span class="function"><span class="keyword">function</span>(<span class="params">event, originalEvent, type,page</span>)</span>&#123;</div><div class="line">    <span class="comment">//为按钮绑定点击事件 page:当前点击的按钮值</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="同源与跨域"><a href="#同源与跨域" class="headerlink" title="同源与跨域"></a>同源与跨域</h1><h2 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h2><h3 id="同源策略的基本概念"><a href="#同源策略的基本概念" class="headerlink" title="同源策略的基本概念"></a>同源策略的基本概念</h3><blockquote>
<p>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。<br>同源策略：最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">协议相同</div><div class="line">域名相同</div><div class="line">端口相同</div></pre></td></tr></table></figure>
<p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//http://www.example.com/dir2/other.html：同源</span></div><div class="line"><span class="comment">//http://example.com/dir/other.html：不同源（域名不同）</span></div><div class="line"><span class="comment">//http://v2.www.example.com/dir/other.html：不同源（域名不同）</span></div><div class="line"><span class="comment">//http://www.example.com:81/dir/other.html：不同源（端口不同）</span></div></pre></td></tr></table></figure>
<h3 id="同源策略的目的"><a href="#同源策略的目的" class="headerlink" title="同源策略的目的"></a>同源策略的目的</h3><blockquote>
<p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
</blockquote>
<p>设想：某用户是网站A的管理员，用户只要登录网站A并且执行删除用户的操作就可以把网站A中的其他用户删除。当这个用户访问了网站A之后，又访问了一个网站B，这时候如果网站B可以获取到网站A的cookie，那么网站B就能伪造该用户的身份去访问网站A，即网站B也可以执行相同的操作去删除网站A中的其他用户，那这样带来的后果是不堪设想的。</p>
<p><a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="external">CSRF攻击（跨站请求伪造）,</a></p>
<p><strong>因此同源策略是必须的，如果cookie可以在不同源的网站中共享，那么互联网将毫无安全可言。</strong></p>
<h3 id="同源策略的限制范围"><a href="#同源策略的限制范围" class="headerlink" title="同源策略的限制范围"></a>同源策略的限制范围</h3><blockquote>
<p>随着互联网的发展，“同源策略”越来越严格，目前，如果非同源，以下三种行为都将收到限制。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. Cookie、LocalStorage 和 IndexDB 无法读取。</span></div><div class="line"><span class="comment">//2. DOM 无法获得。</span></div><div class="line"><span class="comment">//3. AJAX 请求不能发送。</span></div></pre></td></tr></table></figure>
<p>虽然这些限制是很有必要的，但是也给我们日常开发带来不好的影响。比如实际开发过程中，往往都会把服务器端架设到一台甚至是一个集群的服务器中，把客户端页面放到另外一个单独的服务器。那么这时候就会出现不同源的情况，如果我们知道两个网站都是安全的话，我们是希望两个不同源的网站之间可以相互请求数据的。这就需要使用到<strong>跨域</strong> 。</p>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>【演示跨域问题.html】</p>
<h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><blockquote>
<p>JSONP(JSON with Padding)、可用于解决主流浏览器的跨域数据访问的问题。原理：服务端返回一个预先定义好的javascript函数的调用，并且将服务器的数据以该函数参数的形式传递过来，这个方法需要前后端配合。</p>
</blockquote>
<p><code>script</code> 标签是不受同源策略的限制的，它可以载入任意地方的 JavaScript 文件，而并不要求同源。类似的还有<code>img</code>和<code>link</code>标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--不受同源策略的标签--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://www.api.com/1.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="jsonp演化过程1"><a href="#jsonp演化过程1" class="headerlink" title="jsonp演化过程1"></a>jsonp演化过程1</h4><p>php文件</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"alert(1111)"</span>;</div></pre></td></tr></table></figure>
<p>html文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/testjs.php"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>原理：其实src的路径是什么文件不重要，无论引入js文件还是php文件，最后返回给浏览器的都是字符串，因此我们script标签是可以引入一个php文件的。</p>
<h4 id="jsonp演化过程2"><a href="#jsonp演化过程2" class="headerlink" title="jsonp演化过程2"></a>jsonp演化过程2</h4><p>php文件</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"var a = 118;"</span>;</div></pre></td></tr></table></figure>
<p>html文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/testjs.php"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="comment">//a打印出来了118</span></span></div><div class="line"><span class="javascript">  <span class="built_in">console</span>.log(a);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>我们现在做到了一件事情，从不同源的php文件中获取到了数据</strong> </p>
<p>缺点：获取数据的script标签必须写在使用的script标签的前面，必须保证先有数据才能对数据进行渲染。</p>
<h4 id="jsonp演化过程3"><a href="#jsonp演化过程3" class="headerlink" title="jsonp演化过程3"></a>jsonp演化过程3</h4><p>php代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</div><div class="line">$arr = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"name"</span>=&gt;<span class="string">"zs"</span>,</div><div class="line">    <span class="string">"age"</span>=&gt;<span class="number">18</span></div><div class="line">);</div><div class="line">$result = json_encode($arr);</div><div class="line"><span class="comment">//这是一段js函数的调用的代码，$result就是我们想要的数据</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"func($result)"</span>;</div></pre></td></tr></table></figure>
<p>js代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/testjs.php"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>缺点：后端必须知道前端声明的方法的名字，后端才能调用。</p>
<h4 id="jsonp演化过程4"><a href="#jsonp演化过程4" class="headerlink" title="jsonp演化过程4"></a>jsonp演化过程4</h4><p>php代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</div><div class="line">$arr = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"name"</span>=&gt;<span class="string">"zs"</span>,</div><div class="line">    <span class="string">"age"</span>=&gt;<span class="number">18</span></div><div class="line">);</div><div class="line">$result = json_encode($arr);</div><div class="line"><span class="comment">//这是一段js函数的调用的代码，$result就是我们想要的数据</span></div><div class="line"><span class="keyword">echo</span> $_GET[<span class="string">'callback'</span>].<span class="string">"($result)"</span>;</div></pre></td></tr></table></figure>
<p>javascript代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</div><div class="line">button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">  script.src = <span class="string">"http://www.api.com/testjs.php?callback=fun"</span>;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>说白了，jsonp的原理就是 借助了script标签不受同源策略的限制，在服务端返回一个函数的调用，将数据当前调用函数的实参。 在浏览器端，需要程序要声明一个函数，通过形参就可以获取到服务端返回的对应的值。</strong> </p>
<p>jsonp原理大家知道即可，不用太过于去纠结这个原理，因此jquery已经帮我们封装好了，我们使用起来非常的方便。</p>
<h3 id="jquery对于jsonp的封装"><a href="#jquery对于jsonp的封装" class="headerlink" title="jquery对于jsonp的封装"></a>jquery对于jsonp的封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用起来相当的简单，跟普通的get请求没有任何的区别，只需要把dataType固定成jsonp即可。</span></div><div class="line">$.ajax(&#123;</div><div class="line">  type:<span class="string">"get"</span>,</div><div class="line">  url:<span class="string">"http://www.api.com/testjs.php"</span>,</div><div class="line">  dataType:<span class="string">"jsonp"</span>,</div><div class="line">  data:&#123;</div><div class="line">    uname:<span class="string">"hucc"</span>,</div><div class="line">    upass:<span class="string">"123456"</span></div><div class="line">  &#125;,</div><div class="line">  success:<span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(info);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>【案例：查询天气.html】</p>
<p><a href="https://www.jisuapi.com/api/weather/" target="_blank" rel="external">天气查询api地址</a></p>
<p>【案例：省市区三级联动.html】</p>
<p><a href="https://www.jisuapi.com/api/area/" target="_blank" rel="external">api地址</a> </p>
<h1 id="XMLHttpRequest2-0"><a href="#XMLHttpRequest2-0" class="headerlink" title="XMLHttpRequest2.0"></a>XMLHttpRequest2.0</h1><blockquote>
<p>XMLHttpRequest是一个javascript内置对象，使得Javascript可以进行异步的HTTP通信。2008年2月，就提出了XMLHttpRequest Level 2 草案。</p>
</blockquote>
<p>老版本的XMLHttpRequest的缺点：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 仅支持传输文本数据，无法传说二进制文件，比如图片视频等。</span></div><div class="line"><span class="comment">//2. 传输数据时，没有进度信息，只能提示完成与否。</span></div><div class="line"><span class="comment">//3. 受到了"同源策略"的限制</span></div></pre></td></tr></table></figure>
<p>新版本的功能：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 可以设置timeout超时时间</span></div><div class="line"><span class="comment">//2. 可以使用formData对象管理表单数据</span></div><div class="line"><span class="comment">//3. 允许请求不同域名下的数据（跨域）</span></div><div class="line"><span class="comment">//4. 支持上传二进制文件</span></div><div class="line"><span class="comment">//5. 可以获取数据传输的进度信息</span></div></pre></td></tr></table></figure>
<p><strong>注意：我们现在使用new XMLHttpRequest创建的对象就是2.0对象了，我们之前学的是1.0的语法，现在学习一些2.0的新特性即可。</strong>  </p>
<h2 id="timeout设置超时"><a href="#timeout设置超时" class="headerlink" title="timeout设置超时"></a>timeout设置超时</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xhr.timeout = <span class="number">3000</span>;<span class="comment">//设置超时时间</span></div><div class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">"请求超时"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="formData管理表单数据"><a href="#formData管理表单数据" class="headerlink" title="formData管理表单数据"></a>formData管理表单数据</h2><blockquote>
<p>formData对象类似于jquery的serialize方法，用于管理表单数据</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用特点： </span></div><div class="line"><span class="comment">//1. 实例化一个formData对象， new formData(form); form就是表单元素</span></div><div class="line"><span class="comment">//4. formData对象可以直接作为 xhr.send(formData)的参数。注意此时数据是以二进制的形式进行传输。</span></div><div class="line"><span class="comment">//5. formData有一个append方法，可以添加参数。formData.append("id", "1111");</span></div><div class="line"><span class="comment">//6. 这种方式只能以post形式传递，不需要设置请求头，浏览器会自动为我们设置一个合适的请求头。</span></div></pre></td></tr></table></figure>
<p>代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 使用formData必须发送post请求</span></div><div class="line">    xhr.open(<span class="string">"post"</span>, <span class="string">"02-formData.php"</span>);</div><div class="line">    </div><div class="line"><span class="comment">//2. 获取表单元素</span></div><div class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">"#myForm"</span>);</div><div class="line"><span class="comment">//3. 创建form对象，可以直接作为send的参数。</span></div><div class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</div><div class="line"></div><div class="line"><span class="comment">//4. formData可以使用append方法添加参数</span></div><div class="line">formData.append(<span class="string">"id"</span>, <span class="string">"1111"</span>);</div><div class="line"></div><div class="line"><span class="comment">//5. 发送，不需要指定请求头，浏览器会自动选择合适的请求头</span></div><div class="line">xhr.send(formData);</div></pre></td></tr></table></figure>
<h2 id="文件上传-1"><a href="#文件上传-1" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote>
<p>以前，文件上传需要借助表单进行上传，但是表单上传是同步的，也就是说文件上传时，页面需要提交和刷新，用户体验不友好，xhr2.0中的formData对象支持文件的异步上传。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</div><div class="line"><span class="comment">//获取上传的文件，传递到后端</span></div><div class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>).files[<span class="number">0</span>];</div><div class="line">formData.append(<span class="string">"file"</span>, file);</div><div class="line">xhr.send(formData);</div></pre></td></tr></table></figure>
<h2 id="显示文件进度信息"><a href="#显示文件进度信息" class="headerlink" title="显示文件进度信息"></a>显示文件进度信息</h2><blockquote>
<p>xhr2.0还支持获取上传文件的进度信息，因此我们可以根据进度信息可以实时的显示文件的上传进度。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 需要注册 xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125; 事件，用于监听文件上传的进度.注意：需要在send之前注册。</div><div class="line"><span class="number">2.</span> 上传的进度信息会存储事件对象e中</div><div class="line"><span class="number">3.</span> e.loaded表示已上传的大小   e.total表示整个文件的大小</div></pre></td></tr></table></figure>
<p>代码参考：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  </div><div class="line">  inner.style.width = (e.loaded/e.total*<span class="number">100</span>).toFixed(<span class="number">2</span>)+<span class="string">"%"</span>;</div><div class="line">  span.innerHTML = (e.loaded/e.total*<span class="number">100</span>).toFixed(<span class="number">2</span>)+<span class="string">"%"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">xhr.send(formData);</div></pre></td></tr></table></figure>
<p>如果上传文件超过8M，php会报错，需要进行设置，允许php上传大文件。</p>
<h2 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享(CORS)"></a>跨域资源共享(CORS)</h2><h3 id="cors的使用"><a href="#cors的使用" class="headerlink" title="cors的使用"></a>cors的使用</h3><blockquote>
<p>新版本的XMLHttpRequest对象，可以向不同域名的服务器发出HTTP请求。这叫做<a href="http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing" target="_blank" rel="external">“跨域资源共享”</a>（Cross-origin resource sharing，简称CORS）。</p>
</blockquote>
<p>跨域资源共享（CORS）的前提</p>
<ul>
<li>浏览器支持这个功能</li>
<li>服务器必须允许这种跨域。</li>
</ul>
<p>服务器允许跨域的代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//允许所有的域名访问这个接口</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin:*"</span>);</div><div class="line"><span class="comment">//允许www.study.com这个域名访问这个接口</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin:http://www.study.com"</span>);</div></pre></td></tr></table></figure>
<h3 id="CORS的具体流程（了解）"><a href="#CORS的具体流程（了解）" class="headerlink" title="CORS的具体流程（了解）"></a>CORS的具体流程（了解）</h3><ol>
<li>浏览器会根据<strong>同源策略</strong> 查看是否是跨域请求，如果同源，直接发送ajax请求。</li>
<li>如果非同源，说明是跨域请求，浏览器会自动发送一条请求（<strong>预检请求</strong> ），并不会携带数据，服务器接受到请求之后，会返回请求头信息，浏览器查看返回的请求头信息中是否设置了<code>header(&#39;Access-Control-Allow-Origin:请求源域名或者*&#39;);</code></li>
<li>如果没有设置，说明服务器不允许使用cors跨域，那么浏览器不会发送真正的ajax请求。</li>
<li>如果返回的响应头中设置了<code>header(&#39;Access-Control-Allow-Origin:请求源域名或者*&#39;);</code>,浏览器会跟请求头中的<code>Origin: http://www.study.com</code>进行对比，如果满足要求，则发送真正的ajax请求，否则不发送。</li>
<li>结论：<strong>跨域行为是浏览器行为，是浏览器阻止了ajax行为。服务器与服务器之间是不存在跨域的问题的</strong></li>
</ol>
<h3 id="jsonp与cors的对比"><a href="#jsonp与cors的对比" class="headerlink" title="jsonp与cors的对比"></a>jsonp与cors的对比</h3><ul>
<li>jsonp兼容性好，老版本浏览器也支持，但是jsonp仅支持get请求，发送的数据量有限。使用麻烦</li>
<li>cors需要浏览器支持cors功能才行。但是使用简单，<strong>只要服务端设置允许跨域，对于客户端来说，跟普通的get、post请求并没有什么区别。</strong></li>
<li>跨域的安全性问题：很多同学会觉得跨域能带来安全性问题，其实并不会，<strong>因为跨域是需要服务端配合的</strong> ，也就是说不论jsonp还是cors，如果没有服务端的允许，浏览器是没法做到跨域的。</li>
</ul>
<p>【案例：图灵机器人】</p>
<h3 id="其他的跨域手段（没卵用）"><a href="#其他的跨域手段（没卵用）" class="headerlink" title="其他的跨域手段（没卵用）"></a>其他的跨域手段（没卵用）</h3><p>以下方式基本不用啊，了解即可：</p>
<p>1、顶级域名相同的可以通过domain.name来解决，即同时设置 domain.name = 顶级域名（如example.com）<br>2、document.domain + iframe<br>3、window.name + iframe<br>4、location.hash + iframe<br>5、window.postMessage()</p>
<p><a href="http://rickgray.me/2015/09/03/solutions-to-cross-domain-in-browser.html" target="_blank" rel="external">其他跨域方式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;服务器&quot;&gt;&lt;a href=&quot;#服务器&quot; class=&quot;headerlink&quot; title=&quot;服务器&quot;&gt;&lt;/a&gt;服务器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前言：通俗的讲，能够提供某种服务的机器（计算机）称为服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i
    
    </summary>
    
      <category term="AJAX" scheme="zkh7809956.github.io/categories/AJAX/"/>
    
    
      <category term="Http协议" scheme="zkh7809956.github.io/tags/Http%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="ajax" scheme="zkh7809956.github.io/tags/ajax/"/>
    
      <category term="json" scheme="zkh7809956.github.io/tags/json/"/>
    
      <category term="php" scheme="zkh7809956.github.io/tags/php/"/>
    
      <category term="同源与跨域" scheme="zkh7809956.github.io/tags/%E5%90%8C%E6%BA%90%E4%B8%8E%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>我的第五篇博客</title>
    <link href="zkh7809956.github.io/2017/08/17/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>zkh7809956.github.io/2017/08/17/我的博客/</id>
    <published>2017-08-17T12:22:30.000Z</published>
    <updated>2017-08-17T06:25:36.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>
<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p>
<img src="/2017/08/17/我的博客/3.jpg" alt="最爱的提莫" title="最爱的提莫">
<h2 id="为什么要有分支？"><a href="#为什么要有分支？" class="headerlink" title="为什么要有分支？"></a><strong>为什么要有分支？</strong></h2><ul>
<li>如果你要开发一个新的功能，需要2周时间，第一周你只能写50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。</li>
<li>有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。</li>
<li>在工作过程中，经常会碰到<strong>多任务并行开发</strong> 的情况，使用分支就能很好的避免任务之间的影响。</li>
<li>其他版本工具比如svn，cvs中也有分支这个概念，但是这些工具中的分支操作非常的慢，形同摆设。</li>
</ul>
<h2 id="分支操作的命令"><a href="#分支操作的命令" class="headerlink" title="分支操作的命令"></a>分支操作的命令</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与主分支的内容完全相同。</li>
<li>git在第一次提交时，就有了一个叫<code>master</code>的主分支。</li>
</ul>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul>
<li><code>git branch</code>可以查看所有的分支，</li>
<li>在当前分支的前面会有一个</li>
</ul>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul>
<li><code>git checkout 分支名称</code>切换分支</li>
<li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li>
<li>切换分支之前，<strong>必须保证代码已经提交了</strong> </li>
</ul>
<h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul>
<li><code>git branch -d 分支名称</code> 可以删除分支</li>
<li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li>
<li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul>
<li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li>
<li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li>
</ul>
<h2 id="git分支的工作原理"><a href="#git分支的工作原理" class="headerlink" title="git分支的工作原理"></a>git分支的工作原理</h2><h2 id="git合并冲突"><a href="#git合并冲突" class="headerlink" title="git合并冲突"></a>git合并冲突</h2><ul>
<li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li>
<li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>所有的程序员都可以通过远程仓库来进行版本的共享，达到所有人的代码一致的效果。</p>
<h2 id="创建远程仓库（了解）"><a href="#创建远程仓库（了解）" class="headerlink" title="创建远程仓库（了解）"></a>创建远程仓库（了解）</h2><ul>
<li>创建远程仓库</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init --bare   # 创建一个裸仓库</div></pre></td></tr></table></figure>
<ul>
<li>远程仓库是一个裸仓库，只支持push、clone、pull等操作</li>
<li>裸仓库的目的是用来管理版本的共享。</li>
<li>裸仓库不支持add commit等操作。不进行任何的开发工作。</li>
<li>一般裸仓库的名称会以.git结尾</li>
</ul>
<h2 id="远程仓库相关的命令"><a href="#远程仓库相关的命令" class="headerlink" title="远程仓库相关的命令"></a>远程仓库相关的命令</h2><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><ul>
<li>作用：将本地代码提交到远程仓库</li>
<li><code>git push 仓库地址 master</code> 在代码提交到远程仓库，注意master分支必须写，不能省略</li>
<li>例子：<code>git push git@github.com:hucongcong/test.git master</code> 如果第一次使用，需要填写github的用户名和密码</li>
</ul>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><ul>
<li>作用：将远程的代码下载到本地</li>
<li><code>git pull 代码地址 master</code> 将远程的代码中master分支下载到本地</li>
<li>通常在push前，需要先pull一次。</li>
</ul>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><ul>
<li>作用：克隆远程仓库的代码到本地</li>
<li><code>git clone 仓库地址 自定义本地仓库名</code> 将整个仓库克隆到本地</li>
</ul>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>每次push和pull操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p>
<ul>
<li><code>git remote add 仓库别名 仓库地址</code> 使用仓库别名替代仓库地址。仓库别名相当于一个js变量，仓库地址就是对应的值。<ul>
<li><code>git remote add hucc git@github.com:hucongcong/test.git</code> 设置了一个hucc的仓库别名，以后push和pull都可以不用仓库地址，而用hucc</li>
</ul>
</li>
<li><code>git remote remove hucc</code> 删除hucc这个仓库别名。</li>
<li><code>git remote</code> 查看所有的仓库别名</li>
<li>如果使用了<code>git clone</code>命令从远程仓库获取下来的，那么这个本地仓库会自动添加一个 origin的远程地址，指向的就是克隆的远程地址。</li>
</ul>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>git与github没有直接的关系。</p>
<ul>
<li>git是一个版本控制工具。</li>
<li>github是一个代码托管平台，是git的一个远程代码仓库。</li>
<li>将来工作时，公司会有自己的代码仓库。</li>
</ul>
<p><a href="https://github.com/" target="_blank" rel="external">github官网</a></p>
<p><a href="https://git.oschina.net/" target="_blank" rel="external">开源中国-git</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</div><div class="line">2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</div></pre></td></tr></table></figure>
<p>在github上创建一个项目，获取到仓库的地址。然后就可以将本地的代码推送到远程的服务器上。</p>
<h2 id="SSH免登陆"><a href="#SSH免登陆" class="headerlink" title="SSH免登陆"></a>SSH免登陆</h2><p>每次push代码，都需要输入用户名跟密码，非常的麻烦。因此我们可以配置一个SSH免登陆。</p>
<ul>
<li>github为了账户的安全，需要对每一次push请求都要验证用户的身份，只有合法的用户才可以push</li>
<li>使用ssh可以实现免密码操作（不需要使用密码）</li>
</ul>
<h3 id="对称加密与非对称加密（了解）"><a href="#对称加密与非对称加密（了解）" class="headerlink" title="对称加密与非对称加密（了解）"></a>对称加密与非对称加密（了解）</h3><p>对称加密：采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p>
<p>优点：算法公开、计算量小、加密速度快、加密效率高</p>
<p>非对称加密：非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）</p>
<p>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>
<p>优点：更安全，缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</p>
<h3 id="ssh免登录的原理"><a href="#ssh免登录的原理" class="headerlink" title="ssh免登录的原理"></a>ssh免登录的原理</h3><h3 id="SSH免登录配置"><a href="#SSH免登录配置" class="headerlink" title="SSH免登录配置"></a>SSH免登录配置</h3><ul>
<li>1 创建SSH Key：<code>ssh-keygen -t rsa</code></li>
<li>2 在文件路径 <code>C:\用户\当前用户名\</code> 找到 <code>.ssh</code> 文件夹</li>
<li>3 文件夹中有两个文件：<ul>
<li>私钥：<code>id_rsa</code></li>
<li>公钥：<code>id_rsa.pub</code></li>
</ul>
</li>
<li>4 在 <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建SSH key</li>
<li>5 粘贴 公钥 <code>id_rsa.pub</code> 内容到对应文本框中</li>
<li>5 在github中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li>
<li>6 此后，再次SSH方式与github“通信”，不用输入密码确认身份了</li>
</ul>
<h2 id="使用github-pages搭建博客"><a href="#使用github-pages搭建博客" class="headerlink" title="使用github pages搭建博客"></a>使用github pages搭建博客</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages </a>本用于介绍托管在 GitHub 的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p>
<p>缺点：只能放静态页面，也就说github pages只能解析html、css、js，无法解析后端语言。</p>
<p>博客搭建步骤：</p>
<ol>
<li>在本地工作目录使用git初始化 <code>git init</code></li>
<li>创建自己的博客项目</li>
<li>将创建好的博客添加到暂存区 <code>git add [文件路径]</code></li>
<li>本地提交： <code>git commit -m &quot;第一个博客&quot;</code></li>
<li>在github上创建一个项目，项目名<code>用户名.github.io</code> 固定的</li>
<li>提交到github：<code>git push github仓库地址 master</code></li>
<li>查看github中对应的仓库中，是不是提交到了</li>
<li>访问：用户名.github.io</li>
</ol>
<h2 id="hexo创建博客（了解）"><a href="#hexo创建博客（了解）" class="headerlink" title="hexo创建博客（了解）"></a>hexo创建博客（了解）</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li>安装hexo</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div><div class="line"></div><div class="line">hexo -v  # 查看hexo的版本信息</div></pre></td></tr></table></figure>
<ul>
<li>初始化博客</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 新建一个目录  blog</div><div class="line">hexo init  # 初始化</div></pre></td></tr></table></figure>
<ul>
<li>生成静态页面</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate   # 生成静态页面	</div><div class="line">hexo g          # 生成静态页面（简写）</div></pre></td></tr></table></figure>
<ul>
<li>启动服务</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server   # 启动服务</div></pre></td></tr></table></figure>
<ul>
<li>访问站点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:4000/  # 通过这个地址就可以访问了</span></div></pre></td></tr></table></figure>
<h3 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h3><ul>
<li><code>hexo n &#39;博客标题&#39;</code>创建一篇新的博客</li>
<li><code>hexo g</code> 生成博客</li>
<li><code>hexo d</code> 发布博客</li>
</ul>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git分支操作&quot;&gt;&lt;a href=&quot;#git分支操作&quot; class=&quot;headerlink&quot; title=&quot;git分支操作&quot;&gt;&lt;/a&gt;git分支操作&lt;/h1&gt;&lt;p&gt;分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力
    
    </summary>
    
      <category term="javascript" scheme="zkh7809956.github.io/categories/javascript/"/>
    
    
      <category term="git命令" scheme="zkh7809956.github.io/tags/git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>我的第五篇博客</title>
    <link href="zkh7809956.github.io/2017/08/17/%E7%AC%94%E8%AE%B0/"/>
    <id>zkh7809956.github.io/2017/08/17/笔记/</id>
    <published>2017-08-17T12:22:30.000Z</published>
    <updated>2017-08-17T05:11:42.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>
<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p>

<h2 id="为什么要有分支？"><a href="#为什么要有分支？" class="headerlink" title="为什么要有分支？"></a><strong>为什么要有分支？</strong></h2><ul>
<li>如果你要开发一个新的功能，需要2周时间，第一周你只能写50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。</li>
<li>有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。</li>
<li>在工作过程中，经常会碰到<strong>多任务并行开发</strong> 的情况，使用分支就能很好的避免任务之间的影响。</li>
<li>其他版本工具比如svn，cvs中也有分支这个概念，但是这些工具中的分支操作非常的慢，形同摆设。</li>
</ul>
<h2 id="分支操作的命令"><a href="#分支操作的命令" class="headerlink" title="分支操作的命令"></a>分支操作的命令</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与主分支的内容完全相同。</li>
<li>git在第一次提交时，就有了一个叫<code>master</code>的主分支。</li>
</ul>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul>
<li><code>git branch</code>可以查看所有的分支，</li>
<li>在当前分支的前面会有一个</li>
</ul>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul>
<li><code>git checkout 分支名称</code>切换分支</li>
<li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li>
<li>切换分支之前，<strong>必须保证代码已经提交了</strong> </li>
</ul>
<h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul>
<li><code>git branch -d 分支名称</code> 可以删除分支</li>
<li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li>
<li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul>
<li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li>
<li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li>
</ul>
<h2 id="git分支的工作原理"><a href="#git分支的工作原理" class="headerlink" title="git分支的工作原理"></a>git分支的工作原理</h2><h2 id="git合并冲突"><a href="#git合并冲突" class="headerlink" title="git合并冲突"></a>git合并冲突</h2><ul>
<li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li>
<li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>所有的程序员都可以通过远程仓库来进行版本的共享，达到所有人的代码一致的效果。</p>
<h2 id="创建远程仓库（了解）"><a href="#创建远程仓库（了解）" class="headerlink" title="创建远程仓库（了解）"></a>创建远程仓库（了解）</h2><ul>
<li>创建远程仓库</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init --bare   # 创建一个裸仓库</div></pre></td></tr></table></figure>
<ul>
<li>远程仓库是一个裸仓库，只支持push、clone、pull等操作</li>
<li>裸仓库的目的是用来管理版本的共享。</li>
<li>裸仓库不支持add commit等操作。不进行任何的开发工作。</li>
<li>一般裸仓库的名称会以.git结尾</li>
</ul>
<h2 id="远程仓库相关的命令"><a href="#远程仓库相关的命令" class="headerlink" title="远程仓库相关的命令"></a>远程仓库相关的命令</h2><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><ul>
<li>作用：将本地代码提交到远程仓库</li>
<li><code>git push 仓库地址 master</code> 在代码提交到远程仓库，注意master分支必须写，不能省略</li>
<li>例子：<code>git push git@github.com:hucongcong/test.git master</code> 如果第一次使用，需要填写github的用户名和密码</li>
</ul>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><ul>
<li>作用：将远程的代码下载到本地</li>
<li><code>git pull 代码地址 master</code> 将远程的代码中master分支下载到本地</li>
<li>通常在push前，需要先pull一次。</li>
</ul>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><ul>
<li>作用：克隆远程仓库的代码到本地</li>
<li><code>git clone 仓库地址 自定义本地仓库名</code> 将整个仓库克隆到本地</li>
</ul>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>每次push和pull操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p>
<ul>
<li><code>git remote add 仓库别名 仓库地址</code> 使用仓库别名替代仓库地址。仓库别名相当于一个js变量，仓库地址就是对应的值。<ul>
<li><code>git remote add hucc git@github.com:hucongcong/test.git</code> 设置了一个hucc的仓库别名，以后push和pull都可以不用仓库地址，而用hucc</li>
</ul>
</li>
<li><code>git remote remove hucc</code> 删除hucc这个仓库别名。</li>
<li><code>git remote</code> 查看所有的仓库别名</li>
<li>如果使用了<code>git clone</code>命令从远程仓库获取下来的，那么这个本地仓库会自动添加一个 origin的远程地址，指向的就是克隆的远程地址。</li>
</ul>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>git与github没有直接的关系。</p>
<ul>
<li>git是一个版本控制工具。</li>
<li>github是一个代码托管平台，是git的一个远程代码仓库。</li>
<li>将来工作时，公司会有自己的代码仓库。</li>
</ul>
<p><a href="https://github.com/" target="_blank" rel="external">github官网</a></p>
<p><a href="https://git.oschina.net/" target="_blank" rel="external">开源中国-git</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</div><div class="line">2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</div></pre></td></tr></table></figure>
<p>在github上创建一个项目，获取到仓库的地址。然后就可以将本地的代码推送到远程的服务器上。</p>
<h2 id="SSH免登陆"><a href="#SSH免登陆" class="headerlink" title="SSH免登陆"></a>SSH免登陆</h2><p>每次push代码，都需要输入用户名跟密码，非常的麻烦。因此我们可以配置一个SSH免登陆。</p>
<ul>
<li>github为了账户的安全，需要对每一次push请求都要验证用户的身份，只有合法的用户才可以push</li>
<li>使用ssh可以实现免密码操作（不需要使用密码）</li>
</ul>
<h3 id="对称加密与非对称加密（了解）"><a href="#对称加密与非对称加密（了解）" class="headerlink" title="对称加密与非对称加密（了解）"></a>对称加密与非对称加密（了解）</h3><p>对称加密：采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p>
<p>优点：算法公开、计算量小、加密速度快、加密效率高</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="images/对称加密.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>非对称加密：非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）</p>
<p>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>
<p>优点：更安全，缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="images/非对称加密.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="ssh免登录的原理"><a href="#ssh免登录的原理" class="headerlink" title="ssh免登录的原理"></a>ssh免登录的原理</h3><p><img src="images/ssh免登陆.png" alt=""></p>
<h3 id="SSH免登录配置"><a href="#SSH免登录配置" class="headerlink" title="SSH免登录配置"></a>SSH免登录配置</h3><ul>
<li>1 创建SSH Key：<code>ssh-keygen -t rsa</code></li>
<li>2 在文件路径 <code>C:\用户\当前用户名\</code> 找到 <code>.ssh</code> 文件夹</li>
<li>3 文件夹中有两个文件：<ul>
<li>私钥：<code>id_rsa</code></li>
<li>公钥：<code>id_rsa.pub</code></li>
</ul>
</li>
<li>4 在 <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建SSH key</li>
<li>5 粘贴 公钥 <code>id_rsa.pub</code> 内容到对应文本框中</li>
<li>5 在github中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li>
<li>6 此后，再次SSH方式与github“通信”，不用输入密码确认身份了</li>
</ul>
<h2 id="使用github-pages搭建博客"><a href="#使用github-pages搭建博客" class="headerlink" title="使用github pages搭建博客"></a>使用github pages搭建博客</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages </a>本用于介绍托管在 GitHub 的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p>
<p>缺点：只能放静态页面，也就说github pages只能解析html、css、js，无法解析后端语言。</p>
<p>博客搭建步骤：</p>
<ol>
<li>在本地工作目录使用git初始化 <code>git init</code></li>
<li>创建自己的博客项目</li>
<li>将创建好的博客添加到暂存区 <code>git add [文件路径]</code></li>
<li>本地提交： <code>git commit -m &quot;第一个博客&quot;</code></li>
<li>在github上创建一个项目，项目名<code>用户名.github.io</code> 固定的</li>
<li>提交到github：<code>git push github仓库地址 master</code></li>
<li>查看github中对应的仓库中，是不是提交到了</li>
<li>访问：用户名.github.io</li>
</ol>
<h2 id="hexo创建博客（了解）"><a href="#hexo创建博客（了解）" class="headerlink" title="hexo创建博客（了解）"></a>hexo创建博客（了解）</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li>安装hexo</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div><div class="line"></div><div class="line">hexo -v  # 查看hexo的版本信息</div></pre></td></tr></table></figure>
<ul>
<li>初始化博客</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 新建一个目录  blog</div><div class="line">hexo init  # 初始化</div></pre></td></tr></table></figure>
<ul>
<li>生成静态页面</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate   # 生成静态页面	</div><div class="line">hexo g          # 生成静态页面（简写）</div></pre></td></tr></table></figure>
<ul>
<li>启动服务</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server   # 启动服务</div></pre></td></tr></table></figure>
<ul>
<li>访问站点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:4000/  # 通过这个地址就可以访问了</span></div></pre></td></tr></table></figure>
<h3 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h3><ul>
<li><code>hexo n &#39;博客标题&#39;</code>创建一篇新的博客</li>
<li><code>hexo g</code> 生成博客</li>
<li><code>hexo d</code> 发布博客</li>
</ul>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git分支操作&quot;&gt;&lt;a href=&quot;#git分支操作&quot; class=&quot;headerlink&quot; title=&quot;git分支操作&quot;&gt;&lt;/a&gt;git分支操作&lt;/h1&gt;&lt;p&gt;分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力
    
    </summary>
    
      <category term="javascript" scheme="zkh7809956.github.io/categories/javascript/"/>
    
    
      <category term="git命令" scheme="zkh7809956.github.io/tags/git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="zkh7809956.github.io/2017/08/16/hello-world/"/>
    <id>zkh7809956.github.io/2017/08/16/hello-world/</id>
    <published>2017-08-16T14:00:37.078Z</published>
    <updated>2017-08-16T12:18:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="zkh7809956.github.io/2016/08/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2%20/"/>
    <id>zkh7809956.github.io/2016/08/16/我的第二篇博客 /</id>
    <published>2016-08-16T12:22:30.000Z</published>
    <updated>2017-08-30T08:01:13.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我是最大的标题"><a href="#我是最大的标题" class="headerlink" title="我是最大的标题"></a>我是最大的标题</h1><h2 id="我是二级标题"><a href="#我是二级标题" class="headerlink" title="我是二级标题"></a>我是二级标题</h2><h3 id="我是三级标题"><a href="#我是三级标题" class="headerlink" title="我是三级标题"></a>我是三级标题</h3><ul>
<li>我是无序列表<ul>
<li>我是无序列表</li>
<li>呵呵</li>
<li>嘻嘻</li>
</ul>
</li>
</ul>
<p><em>我是斜体代ma</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈哈"</span>);</div><div class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(num);</div><div class="line"><span class="comment">//这是注释</span></div><div class="line"></div><div class="line"></div><div class="line">|标题|描述|</div></pre></td></tr></table></figure>
<p><strong>这是加粗的文字</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我是最大的标题&quot;&gt;&lt;a href=&quot;#我是最大的标题&quot; class=&quot;headerlink&quot; title=&quot;我是最大的标题&quot;&gt;&lt;/a&gt;我是最大的标题&lt;/h1&gt;&lt;h2 id=&quot;我是二级标题&quot;&gt;&lt;a href=&quot;#我是二级标题&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="javascript" scheme="zkh7809956.github.io/categories/javascript/"/>
    
    
      <category term="随笔" scheme="zkh7809956.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
